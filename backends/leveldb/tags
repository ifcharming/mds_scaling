!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCH_CPU_ARM_FAMILY	./port/atomic_pointer.h	/^#define ARCH_CPU_ARM_FAMILY /;"	d
ARCH_CPU_ARM_FAMILY	./port/atomic_pointer.h	/^#undef ARCH_CPU_ARM_FAMILY$/;"	d
ARCH_CPU_X86_FAMILY	./port/atomic_pointer.h	/^#define ARCH_CPU_X86_FAMILY /;"	d
ARCH_CPU_X86_FAMILY	./port/atomic_pointer.h	/^#undef ARCH_CPU_X86_FAMILY$/;"	d
ARMV6_OR_7	./port/port_android.h	/^#define ARMV6_OR_7 /;"	d
ASSERT_EQ	./util/testharness.h	/^#define ASSERT_EQ(/;"	d
ASSERT_GE	./util/testharness.h	/^#define ASSERT_GE(/;"	d
ASSERT_GT	./util/testharness.h	/^#define ASSERT_GT(/;"	d
ASSERT_LE	./util/testharness.h	/^#define ASSERT_LE(/;"	d
ASSERT_LT	./util/testharness.h	/^#define ASSERT_LT(/;"	d
ASSERT_NE	./util/testharness.h	/^#define ASSERT_NE(/;"	d
ASSERT_OK	./util/testharness.h	/^#define ASSERT_OK(/;"	d
ASSERT_TRUE	./util/testharness.h	/^#define ASSERT_TRUE(/;"	d
ATTRIBUTE_WEAK	./port/port_android.h	/^LinuxKernelMemoryBarrierFunc pLinuxKernelMemoryBarrier ATTRIBUTE_WEAK =$/;"	m	namespace:leveldb::port
Abandon	./table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
AcquireLoad	./db/db_bench.cc	/^  void AcquireLoad(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
Acquire_Load	./port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Acquire_Load	./port/port_android.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Add	./db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	./db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	./db/version_set_test.cc	/^  void Add(const char* smallest, const char* largest,$/;"	f	class:leveldb::FindFileTest
Add	./table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	./table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	./table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	./table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	./util/bloom_test.cc	/^  void Add(const Slice& s) {$/;"	f	class:leveldb::BloomTest
Add	./util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
AddBytes	./db/db_bench.cc	/^  void AddBytes(int64_t n) {$/;"	f	class:leveldb::__anon2::Stats
AddFile	./db/version_edit.h	/^  void AddFile(int level, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddInputDeletions	./db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddIterators	./db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	./table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddLiveFiles	./db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddMessage	./db/db_bench.cc	/^  void AddMessage(Slice msg) {$/;"	f	class:leveldb::__anon2::Stats
AddRecord	./db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AfterFile	./db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
AllEntriesFor	./db/bulk_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
AllEntriesFor	./db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
Allocate	./util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	./util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	./util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateNewBlock	./util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
Append	./db/log_test.cc	/^    virtual Status Append(const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
Append	./db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	./helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon16::FileState
Append	./helpers/memenv/memenv.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon16::WritableFileImpl
Append	./table/table_test.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::StringSink
Append	./util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon29::PosixMmapFile
AppendEscapedStringTo	./util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	./db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	./util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendVersion	./db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWithSpace	./db/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon2
Apply	./db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApproximateMemoryUsage	./db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	./db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	./table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	./table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
ArchiveFile	./db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon9::Repairer
Arena	./util/arena.cc	/^Arena::Arena() {$/;"	f	class:leveldb::Arena
Arena	./util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
ArenaTest	./util/arena_test.cc	/^class ArenaTest { };$/;"	c	namespace:leveldb
AssertHeld	./port/port_android.h	/^  void AssertHeld() {$/;"	f	class:leveldb::port::Mutex
AssertHeld	./port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
AtomicCounter	./db/bulk_test.cc	/^  AtomicCounter() : count_(0) { }$/;"	f	class:leveldb::__anon1::AtomicCounter
AtomicCounter	./db/bulk_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon1
AtomicCounter	./db/db_test.cc	/^  AtomicCounter() : count_(0) { }$/;"	f	class:leveldb::__anon5::AtomicCounter
AtomicCounter	./db/db_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon5
AtomicPointer	./port/atomic_pointer.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./port/atomic_pointer.h	/^  explicit AtomicPointer(void* p) : rep_(p) {}$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	./port/port_android.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./port/port_android.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./port/port_android.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	./port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	./port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
Average	./util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
BENCHMARKS	./Makefile	/^BENCHMARKS = db_bench_sqlite3 db_bench_tree_db$/;"	m
BGItem	./util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon29::PosixEnv
BGQueue	./util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon29::PosixEnv
BGThread	./util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon29::PosixEnv
BGThreadWrapper	./util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon29::PosixEnv
BGWork	./db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BIG_ENDIAN	./port/port_posix.h	/^    #define BIG_ENDIAN$/;"	d
BINARY_OP	./util/testharness.h	/^#define BINARY_OP(/;"	d
BINARY_OP	./util/testharness.h	/^#undef BINARY_OP$/;"	d
BLOCK_TEST	./table/table_test.cc	/^  BLOCK_TEST,$/;"	e	enum:leveldb::TestType
BM_LogAndApply	./db/db_test.cc	/^void BM_LogAndApply(int iters, int num_base_files) {$/;"	f	namespace:leveldb
BackgroundCall	./db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	./db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
BeforeFile	./db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
Benchmark	./db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	./db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb
Benchmark	./doc/bench/db_bench_sqlite3.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	./doc/bench/db_bench_sqlite3.cc	/^class Benchmark {$/;"	c	namespace:leveldb
Benchmark	./doc/bench/db_bench_tree_db.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	./doc/bench/db_bench_tree_db.cc	/^class Benchmark {$/;"	c	namespace:leveldb
Between	./db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	./table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigString	./db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Block	./table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	./table/block.h	/^class Block {$/;"	c	namespace:leveldb
BlockBuilder	./table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	./table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockConstructor	./table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	./table/table_test.cc	/^class BlockConstructor: public Constructor {$/;"	c	namespace:leveldb
BlockContents	./table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockFunction	./table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon25
BlockHandle	./table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	./table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockReader	./table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
BloomFilterPolicy	./util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key)$/;"	f	class:leveldb::__anon26::BloomFilterPolicy
BloomFilterPolicy	./util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon26
BloomHash	./util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon26
BloomTest	./util/bloom_test.cc	/^  BloomTest() : policy_(NewBloomFilterPolicy(10)) { }$/;"	f	class:leveldb::BloomTest
BloomTest	./util/bloom_test.cc	/^class BloomTest {$/;"	c	namespace:leveldb
Build	./db/corruption_test.cc	/^  void Build(int n) {$/;"	f	class:leveldb::CorruptionTest
Build	./util/bloom_test.cc	/^  void Build() {$/;"	f	class:leveldb::BloomTest
BuildBatchGroup	./db/db_impl.cc	/^WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {$/;"	f	class:leveldb::DBImpl
BuildTable	./db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
Builder	./db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	./db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet
BulkDelete	./db/bulk_test.cc	/^  void BulkDelete(const Slice& start, const Slice& limit, uint64_t seqno=0) {$/;"	f	class:leveldb::DBTest
BulkDelete	./db/db_impl.cc	/^Status DBImpl::BulkDelete(const WriteOptions& write_opt, $/;"	f	class:leveldb::DBImpl
BulkDelete	./db/db_test.cc	/^  virtual Status BulkDelete(const WriteOptions& options, uint64_t sequence,$/;"	f	class:leveldb::ModelDB
BulkInsert	./db/bulk_test.cc	/^  void BulkInsert() {$/;"	f	class:leveldb::DBTest
BulkInsert	./db/db_impl.cc	/^Status DBImpl::BulkInsert(const WriteOptions& write_opt, $/;"	f	class:leveldb::DBImpl
BulkInsert	./db/db_test.cc	/^  virtual Status BulkInsert(const WriteOptions& options,$/;"	f	class:leveldb::ModelDB
BySmallestKey	./db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder
ByteSize	./db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
BytewiseComparator	./util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	./util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon28::BytewiseComparatorImpl
BytewiseComparatorImpl	./util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon28
CC	./Makefile	/^CC  ?= gcc$/;"	m
CRC	./util/crc32c_test.cc	/^class CRC { };$/;"	c	namespace:leveldb::crc32c
CXX	./Makefile	/^CXX ?= g++$/;"	m
Cache	./include/leveldb/cache.h	/^  Cache() { }$/;"	f	class:leveldb::Cache
Cache	./include/leveldb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
CacheTest	./util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) {$/;"	f	class:leveldb::CacheTest
CacheTest	./util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb
Change	./db/skiplist_test.cc	/^  void Change(ReaderState s) {$/;"	f	class:leveldb::TestState
ChangeOptions	./db/bulk_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	./db/db_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	./table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
Check	./db/corruption_test.cc	/^  void Check(int min_expected, int max_expected) {$/;"	f	class:leveldb::CorruptionTest
CheckCondition	./db/c_test.c	/^#define CheckCondition(/;"	d	file:
CheckDel	./db/c_test.c	/^static void CheckDel(void* ptr, const char* k, size_t klen) {$/;"	f	file:
CheckEqual	./db/c_test.c	/^static void CheckEqual(const char* expected, const char* v, size_t n) {$/;"	f	file:
CheckGet	./db/c_test.c	/^static void CheckGet($/;"	f	file:
CheckInitialOffsetRecord	./db/log_test.cc	/^  void CheckInitialOffsetRecord(uint64_t initial_offset,$/;"	f	class:leveldb::log::LogTest
CheckIter	./db/c_test.c	/^static void CheckIter(leveldb_iterator_t* iter,$/;"	f	file:
CheckNoError	./db/c_test.c	/^#define CheckNoError(/;"	d	file:
CheckOffsetPastEndReturnsNoRecords	./db/log_test.cc	/^  void CheckOffsetPastEndReturnsNoRecords(uint64_t offset_past_end) {$/;"	f	class:leveldb::log::LogTest
CheckPut	./db/c_test.c	/^static void CheckPut(void* ptr,$/;"	f	file:
Cleanup	./include/leveldb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupCompaction	./db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupDeletion	./db/db_impl.cc	/^void DBImpl::CleanupDeletion(DeletionState* deletion) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	./include/leveldb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
CleanupIteratorState	./db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* arg2) {$/;"	f	namespace:leveldb::__anon3
Clear	./db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	./db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	./db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	./util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
ClearSavedValue	./db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon4::DBIter
ClipToRange	./db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	./db/bulk_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	./db/db_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	./db/log_test.cc	/^    virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Close	./helpers/memenv/memenv.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon16::WritableFileImpl
Close	./table/table_test.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Close	./util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon29::PosixMmapFile
CmpCompare	./db/c_test.c	/^static int CmpCompare(void* arg, const char* a, size_t alen,$/;"	f	file:
CmpDestroy	./db/c_test.c	/^static void CmpDestroy(void* arg) { }$/;"	f	file:
CmpName	./db/c_test.c	/^static const char* CmpName(void* arg) {$/;"	f	file:
Code	./include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	./util/coding_test.cc	/^class Coding { };$/;"	c	namespace:leveldb
Compact	./db/bulk_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Compact	./db/db_bench.cc	/^  void Compact(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
Compact	./db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
CompactMemTable	./db/db_impl.cc	/^Status DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactRange	./db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	./db/db_test.cc	/^  virtual void CompactRange(const Slice* start, const Slice* end) {$/;"	f	class:leveldb::ModelDB
CompactRange	./db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	./db/version_set.cc	/^Compaction::Compaction(int level)$/;"	f	class:leveldb::Compaction
Compaction	./db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	./db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	./db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl
CompactionStats	./db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	./db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	./db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb
Comparator	./include/leveldb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	./db/c.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	struct:leveldb_comparator_t
Compare	./db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	./db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	./table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter
Compare	./table/table_test.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon23::ReverseKeyComparator
Compare	./util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon28::BytewiseComparatorImpl
CompareIterators	./db/db_test.cc	/^static bool CompareIterators(int step,$/;"	f	namespace:leveldb
CompressibleString	./util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	./include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
ConcurrentReader	./db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentTest	./db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), &arena_) { }$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	./db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb
CondVar	./port/port_android.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	./port/port_android.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	./port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	./port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	./port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
Constructor	./table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) { }$/;"	f	class:leveldb::Constructor
Constructor	./table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb
ConsumeChar	./util/logging.cc	/^bool ConsumeChar(Slice* in, char c) {$/;"	f	namespace:leveldb
ConsumeDecimalNumber	./util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	./db/skiplist.h	/^bool SkipList<Key,Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	./db/bulk_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	./db/db_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	./db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ConvertLogFilesToTables	./db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon9::Repairer
ConvertLogToTable	./db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon9::Repairer
CopyState	./util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	./db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f
Corrupt	./db/corruption_test.cc	/^  void Corrupt(FileType filetype, int offset, int bytes_to_corrupt) {$/;"	f	class:leveldb::CorruptionTest
Corruption	./db/log_test.cc	/^    virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::log::LogTest::ReportCollector
Corruption	./include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	./table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter
CorruptionTest	./db/corruption_test.cc	/^  CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	./db/corruption_test.cc	/^class CorruptionTest {$/;"	c	namespace:leveldb
Count	./db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
CountDirFiles	./db/bulk_test.cc	/^  int CountDirFiles(const std::string &dirname) {$/;"	f	class:leveldb::DBTest
CountFiles	./db/bulk_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
CountFiles	./db/db_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
Crc32c	./db/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
CreateDir	./helpers/memenv/memenv.cc	/^  virtual Status CreateDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
CreateDir	./include/leveldb/env.h	/^  Status CreateDir(const std::string& d) { return target_->CreateDir(d); }$/;"	f	class:leveldb::EnvWrapper
CreateDir	./util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon29::PosixEnv
CreateFilter	./db/c.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	struct:leveldb_filterpolicy_t
CreateFilter	./db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateFilter	./table/filter_block_test.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::TestHashFilter
CreateFilter	./util/bloom.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::__anon26::BloomFilterPolicy
CurrentFileName	./db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentOptions	./db/bulk_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentOptions	./db/db_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentSizeEstimate	./table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
DB	./include/leveldb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	./include/leveldb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBConstructor	./table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	./table/table_test.cc	/^class DBConstructor: public Constructor {$/;"	c	namespace:leveldb
DBImpl	./db/db_impl.cc	/^DBImpl::DBImpl(const Options& options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	./db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	./db/db_iter.cc	/^  DBIter(const std::string* dbname, Env* env,$/;"	f	class:leveldb::__anon4::DBIter
DBIter	./db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon4
DBState	./doc/bench/db_bench_sqlite3.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark
DBState	./doc/bench/db_bench_tree_db.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark
DBSynchronize	./doc/bench/db_bench_tree_db.cc	/^static void DBSynchronize(kyotocabinet::TreeDB* db_)$/;"	f
DBTest	./db/bulk_test.cc	/^  DBTest() : option_config_(kDefault),$/;"	f	class:leveldb::DBTest
DBTest	./db/bulk_test.cc	/^class DBTest {$/;"	c	namespace:leveldb
DBTest	./db/db_test.cc	/^  DBTest() : option_config_(kDefault),$/;"	f	class:leveldb::DBTest
DBTest	./db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb
DB_TEST	./table/table_test.cc	/^  DB_TEST$/;"	e	enum:leveldb::TestType
DEVICEROOT	./Makefile	/^DEVICEROOT=\/Developer\/Platforms\/iPhoneOS.platform\/Developer$/;"	m
DONE	./db/skiplist_test.cc	/^    DONE$/;"	e	enum:leveldb::TestState::ReaderState
DebugString	./db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	./db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	./db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	./db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
DecodeEntry	./table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeFixed32	./util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	./util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	./db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	./db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	./table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	./table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeKey	./util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeValue	./util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Default	./util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Delete	./db/bulk_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	./db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	./db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	./db/db_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	./db/db_test.cc	/^  virtual Status Delete(const WriteOptions& o, const Slice& key) {$/;"	f	class:leveldb::ModelDB
Delete	./db/snapshot.h	/^  void Delete(const SnapshotImpl* s) {$/;"	f	class:leveldb::SnapshotList
Delete	./db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon13::MemTableInserter
Delete	./db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
DeleteBlock	./table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	./table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	./helpers/memenv/memenv.cc	/^  virtual Status DeleteDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
DeleteDir	./include/leveldb/env.h	/^  Status DeleteDir(const std::string& d) { return target_->DeleteDir(d); }$/;"	f	class:leveldb::EnvWrapper
DeleteDir	./util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon29::PosixEnv
DeleteEntry	./db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	./db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	./helpers/memenv/memenv.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
DeleteFile	./include/leveldb/env.h	/^  Status DeleteFile(const std::string& f) { return target_->DeleteFile(f); }$/;"	f	class:leveldb::EnvWrapper
DeleteFile	./util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon29::PosixEnv
DeleteFileInternal	./helpers/memenv/memenv.cc	/^  void DeleteFileInternal(const std::string& fname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
DeleteObsoleteFiles	./db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	./db/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
DeleteSeq	./db/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
DeletedFileSet	./db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
Deleter	./util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
DeletionState	./db/db_impl.cc	/^  explicit DeletionState(const std::string& dname)$/;"	f	struct:leveldb::DBImpl::DeletionState
DeletionState	./db/db_impl.cc	/^struct DBImpl::DeletionState {$/;"	s	class:leveldb::DBImpl
DescriptorFileName	./db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DestroyAndReopen	./db/bulk_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyAndReopen	./db/db_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyDB	./db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
Direction	./db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon4::DBIter
Direction	./table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon22::MergingIterator
DoCompactionWork	./db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
DoDelete	./db/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark
DoWrite	./db/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark
DoWriteStringToFile	./util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
DroppedBytes	./db/log_test.cc	/^  size_t DroppedBytes() const {$/;"	f	class:leveldb::log::LogTest
DumpFileCounts	./db/bulk_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFileCounts	./db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFilter	./util/bloom_test.cc	/^  void DumpFilter() {$/;"	f	class:leveldb::BloomTest
DumpSSTableList	./db/bulk_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
DumpSSTableList	./db/db_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
EXISTING	./doc/bench/db_bench_sqlite3.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState
EXISTING	./doc/bench/db_bench_tree_db.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState
EmitPhysicalRecord	./db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	./table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon21::EmptyIterator
EmptyIterator	./table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon21
Encode	./db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
EncodeFixed32	./util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	./util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeKey	./db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	./util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeTo	./db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	./table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	./table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	./util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	./util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	./util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Env	./include/leveldb/env.h	/^  Env() { }$/;"	f	class:leveldb::Env
Env	./include/leveldb/env.h	/^class Env {$/;"	c	namespace:leveldb
EnvPosixTest	./util/env_test.cc	/^  EnvPosixTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	./util/env_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb
EnvWrapper	./include/leveldb/env.h	/^  explicit EnvWrapper(Env* t) : target_(t) { }$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	./include/leveldb/env.h	/^class EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	./db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
Erase	./util/cache.cc	/^  virtual void Erase(const Slice& key) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Erase	./util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::LRUCache
Erase	./util/cache_test.cc	/^  void Erase(int key) {$/;"	f	class:leveldb::CacheTest
ErrorCheck	./doc/bench/db_bench_sqlite3.cc	/^static void ErrorCheck(int status) {$/;"	f
ErrorEnv	./util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	./util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
EscapeString	./util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
Evict	./db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
ExecErrorCheck	./doc/bench/db_bench_sqlite3.cc	/^static void ExecErrorCheck(int status, char *err_msg) {$/;"	f
Extend	./util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::crc32c
ExtractMetaData	./db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon9::Repairer
ExtractUserKey	./db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	./db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
FLAGS_WAL_enabled	./doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_WAL_enabled = true;$/;"	v
FLAGS_benchmarks	./db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v
FLAGS_benchmarks	./doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_benchmarks =$/;"	v
FLAGS_benchmarks	./doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_benchmarks =$/;"	v
FLAGS_bloom_bits	./db/db_bench.cc	/^static int FLAGS_bloom_bits = -1;$/;"	v
FLAGS_cache_size	./db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v
FLAGS_cache_size	./doc/bench/db_bench_tree_db.cc	/^static int FLAGS_cache_size = 4194304;$/;"	v
FLAGS_compression	./doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_compression = true;$/;"	v
FLAGS_compression_ratio	./db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v
FLAGS_compression_ratio	./doc/bench/db_bench_sqlite3.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v
FLAGS_compression_ratio	./doc/bench/db_bench_tree_db.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v
FLAGS_db	./db/db_bench.cc	/^static const char* FLAGS_db = "\/tmp\/dbbench";$/;"	v
FLAGS_histogram	./db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v
FLAGS_histogram	./doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_histogram = false;$/;"	v
FLAGS_histogram	./doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_histogram = false;$/;"	v
FLAGS_num	./db/db_bench.cc	/^static int FLAGS_num = 1000000;$/;"	v
FLAGS_num	./doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num = 1000000;$/;"	v
FLAGS_num	./doc/bench/db_bench_tree_db.cc	/^static int FLAGS_num = 1000000;$/;"	v
FLAGS_num_pages	./doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num_pages = 4096;$/;"	v
FLAGS_open_files	./db/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v
FLAGS_page_size	./doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_page_size = 1024;$/;"	v
FLAGS_page_size	./doc/bench/db_bench_tree_db.cc	/^static int FLAGS_page_size = 1024;$/;"	v
FLAGS_reads	./db/db_bench.cc	/^static int FLAGS_reads = -1;$/;"	v
FLAGS_reads	./doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_reads = -1;$/;"	v
FLAGS_reads	./doc/bench/db_bench_tree_db.cc	/^static int FLAGS_reads = -1;$/;"	v
FLAGS_threads	./db/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v
FLAGS_transaction	./doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_transaction = true;$/;"	v
FLAGS_use_existing_db	./db/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v
FLAGS_use_existing_db	./doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v
FLAGS_use_existing_db	./doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v
FLAGS_value_size	./db/db_bench.cc	/^static int FLAGS_value_size = 100;$/;"	v
FLAGS_value_size	./doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_value_size = 100;$/;"	v
FLAGS_value_size	./doc/bench/db_bench_tree_db.cc	/^static int FLAGS_value_size = 100;$/;"	v
FLAGS_write_buffer_size	./db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v
FRESH	./doc/bench/db_bench_sqlite3.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState
FRESH	./doc/bench/db_bench_tree_db.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState
FalsePositiveRate	./util/bloom_test.cc	/^  double FalsePositiveRate() {$/;"	f	class:leveldb::BloomTest
FileExists	./helpers/memenv/memenv.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
FileExists	./include/leveldb/env.h	/^  bool FileExists(const std::string& f) { return target_->FileExists(f); }$/;"	f	class:leveldb::EnvWrapper
FileExists	./util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon29::PosixEnv
FileLock	./include/leveldb/env.h	/^  FileLock() { }$/;"	f	class:leveldb::FileLock
FileLock	./include/leveldb/env.h	/^class FileLock {$/;"	c	namespace:leveldb
FileMetaData	./db/version_edit.h	/^  FileMetaData() : refs(0), allowed_seeks(1 << 30), file_size(0) { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	./db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileNameTest	./db/filename_test.cc	/^class FileNameTest { };$/;"	c	namespace:leveldb
FileSet	./db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder
FileSize	./table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileState	./helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon16::FileState
FileState	./helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon16
FileSystem	./helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon16::InMemoryEnv
FileType	./db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
FilesPerLevel	./db/bulk_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
FilesPerLevel	./db/db_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
FillLevels	./db/bulk_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FillLevels	./db/db_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FilterBlockBuilder	./table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	./table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	./table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	./table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterBlockTest	./table/filter_block_test.cc	/^class FilterBlockTest {$/;"	c	namespace:leveldb
FilterCreate	./db/c_test.c	/^static char* FilterCreate($/;"	f	file:
FilterDestroy	./db/c_test.c	/^static void FilterDestroy(void* arg) { }$/;"	f	file:
FilterKeyMatch	./db/c_test.c	/^unsigned char FilterKeyMatch($/;"	f
FilterName	./db/c_test.c	/^static const char* FilterName(void* arg) {$/;"	f	file:
FilterPolicy	./include/leveldb/filter_policy.h	/^class FilterPolicy {$/;"	c	namespace:leveldb
FilterSize	./util/bloom_test.cc	/^  size_t FilterSize() const {$/;"	f	class:leveldb::BloomTest
Finalize	./db/version_set.cc	/^void VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
Find	./db/version_set_test.cc	/^  int Find(const char* key) {$/;"	f	class:leveldb::FindFileTest
FindFile	./db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFileTest	./db/version_set_test.cc	/^  FindFileTest() : disjoint_sorted_files_(true) { }$/;"	f	class:leveldb::FindFileTest
FindFileTest	./db/version_set_test.cc	/^class FindFileTest {$/;"	c	namespace:leveldb
FindFiles	./db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon9::Repairer
FindGreaterOrEqual	./db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindGreaterOrEqual(const Key& key, Node** prev)$/;"	f	class:leveldb::SkipList
FindLargest	./table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon22::MergingIterator
FindLast	./db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	./db/skiplist.h	/^SkipList<Key,Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindNextUserEntry	./db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon4::DBIter
FindPointer	./util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::HandleTable
FindPrevUserEntry	./db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon4::DBIter
FindShortSuccessor	./db/c.cc	/^  virtual void FindShortSuccessor(std::string* key) const { }$/;"	f	struct:leveldb_comparator_t
FindShortSuccessor	./db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	./table/table_test.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon23::ReverseKeyComparator
FindShortSuccessor	./util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon28::BytewiseComparatorImpl
FindShortestSeparator	./db/c.cc	/^  virtual void FindShortestSeparator(std::string*, const Slice&) const { }$/;"	f	struct:leveldb_comparator_t
FindShortestSeparator	./db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	./table/table_test.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon23::ReverseKeyComparator
FindShortestSeparator	./util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon28::BytewiseComparatorImpl
FindSmallest	./table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon22::MergingIterator
FindTable	./db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
Finish	./table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	./table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	./table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	./table/table_test.cc	/^  void Finish(const Options& options,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	./db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishDeletionOutputFile	./db/db_impl.cc	/^Status DBImpl::FinishDeletionOutputFile(DeletionState* deletion,$/;"	f	class:leveldb::DBImpl
FinishImpl	./table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::BlockConstructor
FinishImpl	./table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::DBConstructor
FinishImpl	./table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::MemTableConstructor
FinishImpl	./table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::TableConstructor
FinishedSingleOp	./db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon2::Stats
FinishedSingleOp	./doc/bench/db_bench_sqlite3.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark
FinishedSingleOp	./doc/bench/db_bench_tree_db.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark
FixChecksum	./db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
Flush	./db/log_test.cc	/^    virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Flush	./helpers/memenv/memenv.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon16::WritableFileImpl
Flush	./table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	./table/table_test.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Flush	./util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon29::PosixMmapFile
Footer	./table/format.h	/^  Footer() { }$/;"	f	class:leveldb::Footer
Footer	./table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForceError	./db/log_test.cc	/^  void ForceError() {$/;"	f	class:leveldb::log::LogTest
FormatTest	./db/dbformat_test.cc	/^class FormatTest { };$/;"	c	namespace:leveldb
Free	./db/c_test.c	/^static void Free(char** ptr) {$/;"	f	file:
Generate	./db/db_bench.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon2::RandomGenerator
Generate	./doc/bench/db_bench_sqlite3.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon14::RandomGenerator
Generate	./doc/bench/db_bench_tree_db.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon15::RandomGenerator
GenerateFilter	./table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
Get	./db/bulk_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	./db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	./db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	./db/db_test.cc	/^  virtual Status Get(const ReadOptions& options,$/;"	f	class:leveldb::ModelDB
Get	./db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	./db/skiplist_test.cc	/^    intptr_t Get(int k) {$/;"	f	struct:leveldb::ConcurrentTest::State
Get	./db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
Get	./db/version_set.cc	/^Status Version::Get(const ReadOptions& options,$/;"	f	class:leveldb::Version
GetApproximateSizes	./db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetApproximateSizes	./db/db_test.cc	/^  virtual void GetApproximateSizes(const Range* r, int n, uint64_t* sizes) {$/;"	f	class:leveldb::ModelDB
GetChildren	./helpers/memenv/memenv.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon16::InMemoryEnv
GetChildren	./include/leveldb/env.h	/^  Status GetChildren(const std::string& dir, std::vector<std::string>* r) {$/;"	f	class:leveldb::EnvWrapper
GetChildren	./util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon29::PosixEnv
GetFileIterator	./db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileSize	./helpers/memenv/memenv.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
GetFileSize	./include/leveldb/env.h	/^  Status GetFileSize(const std::string& f, uint64_t* s) {$/;"	f	class:leveldb::EnvWrapper
GetFileSize	./util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon29::PosixEnv
GetHeapProfile	./port/port_android.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeapProfile	./port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetInternalKey	./db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	./db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	./util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	./util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	./db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetMaxHeight	./db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetOverlappingInputs	./db/version_set.cc	/^void Version::GetOverlappingInputs($/;"	f	class:leveldb::Version
GetProperty	./db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetProperty	./db/db_test.cc	/^  virtual bool GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::ModelDB
GetRange	./db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	./db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetRestartPoint	./table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter
GetSnapshot	./db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetSnapshot	./db/db_test.cc	/^  virtual const Snapshot* GetSnapshot() {$/;"	f	class:leveldb::ModelDB
GetStats	./db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetTestDirectory	./helpers/memenv/memenv.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
GetTestDirectory	./include/leveldb/env.h	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	./util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon29::PosixEnv
GetVarint32	./util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	./util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	./util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	./util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	./util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
Handle	./include/leveldb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleTable	./util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }$/;"	f	class:leveldb::__anon27::HandleTable
HandleTable	./util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon27
Handler	./include/leveldb/write_batch.h	/^  class Handler {$/;"	c	class:leveldb::WriteBatch
Harness	./table/table_test.cc	/^  Harness() : constructor_(NULL) { }$/;"	f	class:leveldb::Harness
Harness	./table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb
Hash	./util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
HashNumbers	./db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest
HashSlice	./util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
HeapProfile	./db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark
Histogram	./util/histogram.h	/^  Histogram() { }$/;"	f	class:leveldb::Histogram
Histogram	./util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
IKey	./db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key,$/;"	f	namespace:leveldb
INSTALL_PATH	./Makefile	/^INSTALL_PATH ?= $(CURDIR)$/;"	m
IOError	./include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IOError	./util/env_posix.cc	/^static Status IOError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon29
IOSVERSION	./Makefile	/^IOSVERSION=$(shell defaults read \/Developer\/Platforms\/iPhoneOS.platform\/version CFBundleShortVersionString)$/;"	m
IS_LITTLE_ENDIAN	./port/port_posix.h	/^#define IS_LITTLE_ENDIAN /;"	d
InMemoryEnv	./helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) { }$/;"	f	class:leveldb::__anon16::InMemoryEnv
InMemoryEnv	./helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon16
Increment	./db/bulk_test.cc	/^  void Increment() {$/;"	f	class:leveldb::__anon1::AtomicCounter
Increment	./db/db_test.cc	/^  void Increment() {$/;"	f	class:leveldb::__anon5::AtomicCounter
Increment	./table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementByte	./db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
InfoLogFileName	./db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Init	./table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
InitDataBlock	./table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
InitDefaultEnv	./util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
Insert	./db/skiplist.h	/^void SkipList<Key,Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	./util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon27::HandleTable
Insert	./util/cache.cc	/^  virtual Handle* Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Insert	./util/cache.cc	/^Cache::Handle* LRUCache::Insert($/;"	f	class:leveldb::__anon27::LRUCache
Insert	./util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
InsertInto	./db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	./db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
IntSetToString	./db/version_set.cc	/^std::string IntSetToString(const std::set<uint64_t>& s) {$/;"	f	namespace:leveldb::__anon11
InternalFilterPolicy	./db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) { }$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	./db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	./table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k,$/;"	f	class:leveldb::Table
InternalKey	./db/dbformat.h	/^  InternalKey() { }   \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	./db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	./db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	./db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	./db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	./db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InvalidArgument	./include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Is	./util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsBaseLevelForKey	./db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsCorruption	./include/leveldb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsIOError	./include/leveldb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsNotFound	./include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsOk	./util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsTrivialMove	./db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsValidKey	./db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest
Iter	./table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	./table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block
IterState	./db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon3
IterStatus	./db/bulk_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
IterStatus	./db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterate	./db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	./db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	./db/skiplist.h	/^inline SkipList<Key,Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	./include/leveldb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	./table/iterator.cc	/^Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorWrapper	./table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false) { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	./table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter): iter_(NULL) {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	./table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
K	./db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest
K	./db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest
KVMap	./db/db_test.cc	/^typedef std::map<std::string, std::string> KVMap;$/;"	t	namespace:leveldb::__anon7
KVMap	./table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb
Key	./db/corruption_test.cc	/^  Slice Key(int i, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Key	./db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	./db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb
Key	./util/bloom_test.cc	/^static Slice Key(int i, char* buffer) {$/;"	f	namespace:leveldb
KeyComparator	./db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	./db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	./table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	./table/table_test.cc	/^class KeyConvertingIterator: public Iterator {$/;"	c	namespace:leveldb
KeyIsAfterNode	./db/skiplist.h	/^bool SkipList<Key,Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMayMatch	./db/c.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	struct:leveldb_filterpolicy_t
KeyMayMatch	./db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	./table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
KeyMayMatch	./table/filter_block_test.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	class:leveldb::TestHashFilter
KeyMayMatch	./util/bloom.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {$/;"	f	class:leveldb::__anon26::BloomFilterPolicy
LEVELDB_HAVE_MEMORY_BARRIER	./port/atomic_pointer.h	/^#define LEVELDB_HAVE_MEMORY_BARRIER$/;"	d
LEVELDB_HAVE_MEMORY_BARRIER	./port/atomic_pointer.h	/^#undef LEVELDB_HAVE_MEMORY_BARRIER$/;"	d
LE_LOAD32	./util/crc32c.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::crc32c
LIBOBJECTS	./Makefile	/^LIBOBJECTS = $(SOURCES:.cc=.o)$/;"	m
LIBRARY	./Makefile	/^LIBRARY = libleveldb.a$/;"	m
LITTLE_ENDIAN	./port/port_posix.h	/^    #define LITTLE_ENDIAN$/;"	d
LRUCache	./util/cache.cc	/^LRUCache::LRUCache()$/;"	f	class:leveldb::__anon27::LRUCache
LRUCache	./util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon27
LRUHandle	./util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon27
LRU_Append	./util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* e) {$/;"	f	class:leveldb::__anon27::LRUCache
LRU_Remove	./util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon27::LRUCache
LastRecordOffset	./db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() {$/;"	f	class:leveldb::log::Reader
LastSequence	./db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LevelFileNumIterator	./db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	./db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version
LevelState	./db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder
LevelSummary	./db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	./db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
LinuxKernelMemoryBarrierFunc	./port/port_android.h	/^typedef void (*LinuxKernelMemoryBarrierFunc)(void);$/;"	t	namespace:leveldb::port
Lock	./port/port_android.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Lock	./port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
LockFile	./helpers/memenv/memenv.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
LockFile	./include/leveldb/env.h	/^  Status LockFile(const std::string& f, FileLock** l) {$/;"	f	class:leveldb::EnvWrapper
LockFile	./util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon29::PosixEnv
LockFileName	./db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockOrUnlock	./util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon29
Log	./util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAndApply	./db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {$/;"	f	class:leveldb::VersionSet
LogFileName	./db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogNumber	./db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogTest	./db/log_test.cc	/^  LogTest() : reading_(false),$/;"	f	class:leveldb::log::LogTest
LogTest	./db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log
Logger	./include/leveldb/env.h	/^  Logger() { }$/;"	f	class:leveldb::Logger
Logger	./include/leveldb/env.h	/^class Logger {$/;"	c	namespace:leveldb
Logv	./util/posix_logger.h	/^  virtual void Logv(const char* format, va_list ap) {$/;"	f	class:leveldb::PosixLogger
Lookup	./util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::HandleTable
Lookup	./util/cache.cc	/^  virtual Handle* Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Lookup	./util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::LRUCache
Lookup	./util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
LookupKey	./db/dbformat.cc	/^LookupKey::LookupKey(const Slice& user_key, SequenceNumber s) {$/;"	f	class:leveldb::LookupKey
LookupKey	./db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
MEMENVLIBRARY	./Makefile	/^MEMENVLIBRARY = libmemenv.a$/;"	m
MEMENVOBJECTS	./Makefile	/^MEMENVOBJECTS = $(MEMENV_SOURCES:.cc=.o)$/;"	m
MEMTABLE_TEST	./table/table_test.cc	/^  MEMTABLE_TEST,$/;"	e	enum:leveldb::TestType
MTState	./db/db_test.cc	/^struct MTState {$/;"	s	namespace:leveldb::__anon6
MTThread	./db/db_test.cc	/^struct MTThread {$/;"	s	namespace:leveldb::__anon6
MTThreadBody	./db/db_test.cc	/^static void MTThreadBody(void* arg) {$/;"	f	namespace:leveldb::__anon6
MakeFileName	./db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeInputIterator	./db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeKey	./db/db_test.cc	/^std::string MakeKey(unsigned int num) {$/;"	f	namespace:leveldb
MakeKey	./db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest
MakeRoomForWrite	./db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
MakeTables	./db/bulk_test.cc	/^  void MakeTables(int n, const std::string& small, const std::string& large) {$/;"	f	class:leveldb::DBTest
MakeTables	./db/db_test.cc	/^  void MakeTables(int n, const std::string& small, const std::string& large) {$/;"	f	class:leveldb::DBTest
ManifestFileNumber	./db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
ManualCompaction	./db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MapNewRegion	./util/env_posix.cc	/^  bool MapNewRegion() {$/;"	f	class:leveldb::__anon29::PosixMmapFile
MarkFileNumberUsed	./db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
Mask	./util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
MatchError	./db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
Matches	./util/bloom_test.cc	/^  bool Matches(const Slice& s) {$/;"	f	class:leveldb::BloomTest
MaxBytesForLevel	./db/version_set.cc	/^static double MaxBytesForLevel(int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	./db/version_set.cc	/^uint64_t MaxFileSizeForLevel(int level) {$/;"	f	namespace:leveldb
MaxNextLevelOverlappingBytes	./db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOutputFileSize	./db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaybeAddFile	./db/version_set.cc	/^  void MaybeAddFile(Version* v, int level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeIgnoreError	./db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybeScheduleCompaction	./db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
Median	./util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemEnvTest	./helpers/memenv/memenv_test.cc	/^  MemEnvTest()$/;"	f	class:leveldb::MemEnvTest
MemEnvTest	./helpers/memenv/memenv_test.cc	/^class MemEnvTest {$/;"	c	namespace:leveldb
MemTable	./db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	./db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	./table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	./table/table_test.cc	/^class MemTableConstructor: public Constructor {$/;"	c	namespace:leveldb
MemTableInserter	./db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon13
MemTableIterator	./db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table) { }$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	./db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb
MemTableTest	./table/table_test.cc	/^class MemTableTest { };$/;"	c	namespace:leveldb
MemoryBarrier	./port/port_android.h	/^  inline void MemoryBarrier() const {$/;"	f	class:leveldb::port::AtomicPointer
MemoryUsage	./util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
Merge	./db/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon2::Stats
Merge	./util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
MergingIterator	./table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon22::MergingIterator
MergingIterator	./table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon22
MigrateLevel0Table	./db/db_impl.cc	/^Status DBImpl::MigrateLevel0Table(const std::string& fname,$/;"	f	class:leveldb::DBImpl
ModelDB	./db/db_test.cc	/^  explicit ModelDB(const Options& options): options_(options) { }$/;"	f	class:leveldb::ModelDB
ModelDB	./db/db_test.cc	/^class ModelDB: public DB {$/;"	c	namespace:leveldb
ModelIter	./db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	./db/db_test.cc	/^  class ModelIter: public Iterator {$/;"	c	class:leveldb::ModelDB
ModelSnapshot	./db/db_test.cc	/^  class ModelSnapshot : public Snapshot {$/;"	c	class:leveldb::ModelDB
Mutex	./port/port_android.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	./port/port_android.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	./port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	./port/port_posix.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	./port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
MutexLock	./util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) : mu_(mu) {$/;"	f	class:leveldb::MutexLock
MutexLock	./util/mutexlock.h	/^class MutexLock {$/;"	c	namespace:leveldb
Name	./db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_comparator_t
Name	./db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_filterpolicy_t
Name	./db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const {$/;"	f	class:leveldb::InternalFilterPolicy
Name	./db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	./table/filter_block_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::TestHashFilter
Name	./table/table_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon23::ReverseKeyComparator
Name	./util/bloom.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon26::BloomFilterPolicy
Name	./util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon28::BytewiseComparatorImpl
NeedsCompaction	./db/version_set.h	/^  bool NeedsCompaction() const {$/;"	f	class:leveldb::VersionSet
New	./db/snapshot.h	/^  const SnapshotImpl* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewBloomFilterPolicy	./util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	./db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	./db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	./table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor
NewDBIterator	./db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	./table/iterator.cc	/^Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	./table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	./db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	./util/cache.cc	/^  virtual uint64_t NewId() {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
NewInternalIterator	./db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	./db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	./db/db_test.cc	/^  virtual Iterator* NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::ModelDB
NewIterator	./db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	./db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	./table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	./table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewIterator	./table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::BlockConstructor
NewIterator	./table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::DBConstructor
NewIterator	./table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::MemTableConstructor
NewIterator	./table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::TableConstructor
NewLRUCache	./util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewLogger	./include/leveldb/env.h	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::EnvWrapper
NewLogger	./util/env_posix.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon29::PosixEnv
NewMemEnv	./helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) {$/;"	f	namespace:leveldb
NewMergingIterator	./table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n) {$/;"	f	namespace:leveldb
NewNode	./db/skiplist.h	/^SkipList<Key,Comparator>::NewNode(const Key& key, int height) {$/;"	f	class:leveldb::SkipList
NewRandomAccessFile	./db/bulk_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	./db/db_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	./helpers/memenv/memenv.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon16::InMemoryEnv
NewRandomAccessFile	./include/leveldb/env.h	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	./util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon29::PosixEnv
NewSequentialFile	./helpers/memenv/memenv.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon16::InMemoryEnv
NewSequentialFile	./include/leveldb/env.h	/^  Status NewSequentialFile(const std::string& f, SequentialFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	./util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon29::PosixEnv
NewTwoLevelIterator	./table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewWritableFile	./db/bulk_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	./db/db_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	./helpers/memenv/memenv.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon16::InMemoryEnv
NewWritableFile	./include/leveldb/env.h	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	./util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon29::PosixEnv
NewWritableFile	./util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewestFirst	./db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	./db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon4::DBIter
Next	./db/db_test.cc	/^    virtual void Next() { ++iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Next	./db/memtable.cc	/^  virtual void Next() { iter_.Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	./db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	./db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	./db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	./table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	./table/iterator.cc	/^  virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon21::EmptyIterator
Next	./table/iterator_wrapper.h	/^  void Next()               { assert(iter_); iter_->Next();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	./table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon22::MergingIterator
Next	./table/table_test.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::KeyConvertingIterator
Next	./table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
Next	./util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
NextEntryOffset	./table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter
NextLength	./util/bloom_test.cc	/^static int NextLength(int length) {$/;"	f	namespace:leveldb
NoBarrier_Load	./port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const { return rep_; }$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Load	./port/port_android.h	/^  inline void* NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	./db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	./db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	./port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) { rep_ = v; }$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Store	./port/port_android.h	/^  inline void NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Node	./db/skiplist.h	/^  explicit Node(const Key& k) : key(k) { }$/;"	f	struct:leveldb::SkipList::Node
Node	./db/skiplist.h	/^struct SkipList<Key,Comparator>::Node {$/;"	s	class:leveldb::SkipList
NotFound	./include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	./include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NowMicros	./include/leveldb/env.h	/^  uint64_t NowMicros() {$/;"	f	class:leveldb::EnvWrapper
NowMicros	./util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon29::PosixEnv
NumEntries	./table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumFiles	./db/version_set.h	/^  int NumFiles(int level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumLevelBytes	./db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	./db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumRestarts	./table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumTableFilesAtLevel	./db/bulk_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumTableFilesAtLevel	./db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumberString	./db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	./util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OK	./include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
OPT	./Makefile	/^OPT ?= -g2              # (B) Debug mode, w\/ full line-level debugging symbols$/;"	m
OldInfoLogFileName	./db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OneIn	./util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
Open	./db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	./db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	./doc/bench/db_bench_sqlite3.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	./doc/bench/db_bench_tree_db.cc	/^    void Open(bool sync) {$/;"	f	class:leveldb::Benchmark
Open	./table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
OpenCompactionOutputFile	./db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OpenDeletionOutputFile	./db/db_impl.cc	/^Status DBImpl::OpenDeletionOutputFile(DeletionState* deletion) {$/;"	f	class:leveldb::DBImpl
OptionConfig	./db/bulk_test.cc	/^  enum OptionConfig {$/;"	g	class:leveldb::DBTest
OptionConfig	./db/db_test.cc	/^  enum OptionConfig {$/;"	g	class:leveldb::DBTest
Options	./include/leveldb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	./util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Order	./doc/bench/db_bench_sqlite3.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark
Order	./doc/bench/db_bench_tree_db.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark
Output	./db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState
Output	./db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::DeletionState
OverlapInLevel	./db/version_set.cc	/^bool Version::OverlapInLevel(int level,$/;"	f	class:leveldb::Version
Overlaps	./db/version_set_test.cc	/^  bool Overlaps(const char* smallest, const char* largest) {$/;"	f	class:leveldb::FindFileTest
PORT_ATOMIC_POINTER_H_	./port/atomic_pointer.h	/^#define PORT_ATOMIC_POINTER_H_$/;"	d
PROGRAMS	./Makefile	/^PROGRAMS = db_bench $(TESTS)$/;"	m
PackSequenceAndType	./db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
ParseFileName	./db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseInternalKey	./db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	./db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon4::DBIter
ParseNextKey	./table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter
ParsedInternalKey	./db/dbformat.h	/^  ParsedInternalKey() { }  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	./db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	./db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
Percentile	./util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PickCompaction	./db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickLevelForMemTableOutput	./db/version_set.cc	/^int Version::PickLevelForMemTableOutput($/;"	f	class:leveldb::Version
PickRandomKey	./table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
PosixEnv	./util/env_posix.cc	/^PosixEnv::PosixEnv() : page_size_(getpagesize()),$/;"	f	class:leveldb::__anon29::PosixEnv
PosixEnv	./util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon29
PosixFileLock	./util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon29
PosixLogger	./util/posix_logger.h	/^  PosixLogger(FILE* f, uint64_t (*gettid)()) : file_(f), gettid_(gettid) { }$/;"	f	class:leveldb::PosixLogger
PosixLogger	./util/posix_logger.h	/^class PosixLogger : public Logger {$/;"	c	namespace:leveldb
PosixMmapFile	./util/env_posix.cc	/^  PosixMmapFile(const std::string& fname, int fd, size_t page_size)$/;"	f	class:leveldb::__anon29::PosixMmapFile
PosixMmapFile	./util/env_posix.cc	/^class PosixMmapFile : public WritableFile {$/;"	c	namespace:leveldb::__anon29
PosixMmapReadableFile	./util/env_posix.cc	/^  PosixMmapReadableFile(const std::string& fname, void* base, size_t length)$/;"	f	class:leveldb::__anon29::PosixMmapReadableFile
PosixMmapReadableFile	./util/env_posix.cc	/^class PosixMmapReadableFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon29
PosixRandomAccessFile	./util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd)$/;"	f	class:leveldb::__anon29::PosixRandomAccessFile
PosixRandomAccessFile	./util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon29
PosixSequentialFile	./util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon29::PosixSequentialFile
PosixSequentialFile	./util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon29
Prev	./db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon4::DBIter
Prev	./db/db_test.cc	/^    virtual void Prev() { --iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Prev	./db/memtable.cc	/^  virtual void Prev() { iter_.Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	./db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	./db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	./table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	./table/iterator.cc	/^  virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon21::EmptyIterator
Prev	./table/iterator_wrapper.h	/^  void Prev()               { assert(iter_); iter_->Prev();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	./table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon22::MergingIterator
Prev	./table/table_test.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::KeyConvertingIterator
Prev	./table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
PrevLogNumber	./db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
PrintContents	./db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintEnvironment	./db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark
PrintEnvironment	./doc/bench/db_bench_sqlite3.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark
PrintEnvironment	./doc/bench/db_bench_tree_db.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark
PrintHeader	./db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark
PrintHeader	./doc/bench/db_bench_sqlite3.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark
PrintHeader	./doc/bench/db_bench_tree_db.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark
PrintStats	./db/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark
PrintWarnings	./db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark
PrintWarnings	./doc/bench/db_bench_sqlite3.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark
PrintWarnings	./doc/bench/db_bench_tree_db.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark
Property	./db/corruption_test.cc	/^  int Property(const std::string& name) {$/;"	f	class:leveldb::CorruptionTest
PthreadCall	./port/port_android.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	./port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	./util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon29::PosixEnv
Put	./db/bulk_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	./db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	./db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	./db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	./db/db_test.cc	/^  virtual Status Put(const WriteOptions& o, const Slice& k, const Slice& v) {$/;"	f	class:leveldb::ModelDB
Put	./db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon13::MemTableInserter
Put	./db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	./util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	./util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	./util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	./util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	./util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
RANDOM	./doc/bench/db_bench_sqlite3.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order
RANDOM	./doc/bench/db_bench_tree_db.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order
RUNNING	./db/skiplist_test.cc	/^    RUNNING,$/;"	e	enum:leveldb::TestState::ReaderState
Random	./util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) { }$/;"	f	class:leveldb::Random
Random	./util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	./include/leveldb/env.h	/^  RandomAccessFile() { }$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	./include/leveldb/env.h	/^class RandomAccessFile {$/;"	c	namespace:leveldb
RandomAccessFileImpl	./helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon16::RandomAccessFileImpl
RandomAccessFileImpl	./helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon16
RandomGenerator	./db/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon2::RandomGenerator
RandomGenerator	./db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon2
RandomGenerator	./doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon14::RandomGenerator
RandomGenerator	./doc/bench/db_bench_sqlite3.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon14
RandomGenerator	./doc/bench/db_bench_tree_db.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon15::RandomGenerator
RandomGenerator	./doc/bench/db_bench_tree_db.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon15
RandomHeight	./db/skiplist.h	/^int SkipList<Key,Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomKey	./db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	./util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomSeed	./util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSkewedString	./db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	./db/bulk_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	./db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	./util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	./db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
Range	./include/leveldb/db.h	/^  Range() { }$/;"	f	struct:leveldb::Range
Range	./include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	./include/leveldb/db.h	/^struct Range {$/;"	s	namespace:leveldb
Read	./db/bulk_test.cc	/^  int Read() {$/;"	f	class:leveldb::__anon1::AtomicCounter
Read	./db/db_test.cc	/^  int Read() {$/;"	f	class:leveldb::__anon5::AtomicCounter
Read	./db/log_test.cc	/^    virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::log::LogTest::StringSource
Read	./db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	./doc/bench/db_bench_sqlite3.cc	/^  void Read(Order order, int entries_per_batch) {$/;"	f	class:leveldb::Benchmark
Read	./helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon16::FileState
Read	./helpers/memenv/memenv.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon16::SequentialFileImpl
Read	./helpers/memenv/memenv.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon16::RandomAccessFileImpl
Read	./table/table_test.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::StringSource
Read	./util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon29::PosixSequentialFile
Read	./util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon29::PosixMmapReadableFile
Read	./util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon29::PosixRandomAccessFile
ReadBlock	./table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadFileToString	./util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	./table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadHot	./db/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
ReadMeta	./table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	./db/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
ReadOptions	./include/leveldb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	./include/leveldb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadPhysicalRecord	./db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadRandom	./db/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
ReadRandom	./doc/bench/db_bench_tree_db.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark
ReadRecord	./db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReverse	./db/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
ReadSequential	./db/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
ReadSequential	./doc/bench/db_bench_sqlite3.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadSequential	./doc/bench/db_bench_tree_db.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadStep	./db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
ReadWhileWriting	./db/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
Reader	./db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	./db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	./db/skiplist_test.cc	/^  enum ReaderState {$/;"	g	class:leveldb::TestState
RecordType	./db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	./db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit) {$/;"	f	class:leveldb::DBImpl
Recover	./db/version_set.cc	/^Status VersionSet::Recover() {$/;"	f	class:leveldb::VersionSet
RecoverLogFile	./db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number,$/;"	f	class:leveldb::DBImpl
Ref	./db/memtable.h	/^  void Ref() { ++refs_; }$/;"	f	class:leveldb::MemTable
Ref	./db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
Ref	./helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon16::FileState
RegisterCleanup	./table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterTest	./util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
Release	./util/cache.cc	/^  virtual void Release(Handle* handle) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Release	./util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon27::LRUCache
ReleaseBlock	./table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseInputs	./db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	./db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
ReleaseSnapshot	./db/db_test.cc	/^  virtual void ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::ModelDB
Release_Store	./port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Release_Store	./port/port_android.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Remove	./util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon27::HandleTable
RenameFile	./helpers/memenv/memenv.cc	/^  virtual Status RenameFile(const std::string& src,$/;"	f	class:leveldb::__anon16::InMemoryEnv
RenameFile	./include/leveldb/env.h	/^  Status RenameFile(const std::string& s, const std::string& t) {$/;"	f	class:leveldb::EnvWrapper
RenameFile	./util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon29::PosixEnv
Reopen	./db/bulk_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
Reopen	./db/corruption_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::CorruptionTest
Reopen	./db/db_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
Rep	./table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table
Rep	./table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	./table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder
RepairDB	./db/corruption_test.cc	/^  void RepairDB() {$/;"	f	class:leveldb::CorruptionTest
RepairDB	./db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
Repairer	./db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon9::Repairer
Repairer	./db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon9
Report	./db/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon2::Stats
ReportCollector	./db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) { }$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	./db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest
ReportCorruption	./db/log_reader.cc	/^void Reader::ReportCorruption(size_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	./db/log_reader.cc	/^void Reader::ReportDrop(size_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
ReportMessage	./db/log_test.cc	/^  std::string ReportMessage() const {$/;"	f	class:leveldb::log::LogTest
Reporter	./db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
Reset	./db/bulk_test.cc	/^  void Reset() {$/;"	f	class:leveldb::__anon1::AtomicCounter
Reset	./db/db_test.cc	/^  void Reset() {$/;"	f	class:leveldb::__anon5::AtomicCounter
Reset	./table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	./table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor
Reset	./util/bloom_test.cc	/^  void Reset() {$/;"	f	class:leveldb::BloomTest
Resize	./util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon27::HandleTable
Reverse	./table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseKeyComparator	./table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon23
Roundup	./util/env_posix.cc	/^  static size_t Roundup(size_t x, size_t y) {$/;"	f	class:leveldb::__anon29::PosixMmapFile
Run	./db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	./db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon9::Repairer
Run	./doc/bench/db_bench_sqlite3.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	./doc/bench/db_bench_tree_db.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
RunAllTests	./util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunBenchmark	./db/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark
RunConcurrent	./db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
SEQUENTIAL	./doc/bench/db_bench_sqlite3.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order
SEQUENTIAL	./doc/bench/db_bench_tree_db.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order
SHARED	./Makefile	/^SHARED = $(SHARED1) $(SHARED2) $(SHARED3)$/;"	m
SHARED1	./Makefile	/^SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)$/;"	m
SHARED2	./Makefile	/^SHARED2 = $(SHARED1).$(SHARED_MAJOR)$/;"	m
SHARED3	./Makefile	/^SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)$/;"	m
SHARED_MAJOR	./Makefile	/^SHARED_MAJOR = 1$/;"	m
SHARED_MINOR	./Makefile	/^SHARED_MINOR = 4$/;"	m
SIMULATORROOT	./Makefile	/^SIMULATORROOT=\/Developer\/Platforms\/iPhoneSimulator.platform\/Developer$/;"	m
STARTING	./db/skiplist_test.cc	/^    STARTING,$/;"	e	enum:leveldb::TestState::ReaderState
STEP1	./util/crc32c.cc	/^#define STEP1 /;"	d
STEP1	./util/crc32c.cc	/^#undef STEP1$/;"	d
STEP4	./util/crc32c.cc	/^#define STEP4 /;"	d
STEP4	./util/crc32c.cc	/^#undef STEP4$/;"	d
STLLessThan	./table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) { }$/;"	f	struct:leveldb::__anon24::STLLessThan
STLLessThan	./table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) { }$/;"	f	struct:leveldb::__anon24::STLLessThan
STLLessThan	./table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon24
STORAGE_LEVELDB_DB_BUILDER_H_	./db/builder.h	/^#define STORAGE_LEVELDB_DB_BUILDER_H_$/;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	./db/db_impl.h	/^#define STORAGE_LEVELDB_DB_DB_IMPL_H_$/;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	./db/db_iter.h	/^#define STORAGE_LEVELDB_DB_DB_ITER_H_$/;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	./db/filename.h	/^#define STORAGE_LEVELDB_DB_FILENAME_H_$/;"	d
STORAGE_LEVELDB_DB_FORMAT_H_	./db/dbformat.h	/^#define STORAGE_LEVELDB_DB_FORMAT_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	./db/log_format.h	/^#define STORAGE_LEVELDB_DB_LOG_FORMAT_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	./db/log_reader.h	/^#define STORAGE_LEVELDB_DB_LOG_READER_H_$/;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	./db/log_writer.h	/^#define STORAGE_LEVELDB_DB_LOG_WRITER_H_$/;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	./db/memtable.h	/^#define STORAGE_LEVELDB_DB_MEMTABLE_H_$/;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	./db/snapshot.h	/^#define STORAGE_LEVELDB_DB_SNAPSHOT_H_$/;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	./db/table_cache.h	/^#define STORAGE_LEVELDB_DB_TABLE_CACHE_H_$/;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	./db/version_edit.h	/^#define STORAGE_LEVELDB_DB_VERSION_EDIT_H_$/;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	./db/version_set.h	/^#define STORAGE_LEVELDB_DB_VERSION_SET_H_$/;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	./db/write_batch_internal.h	/^#define STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_$/;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	./helpers/memenv/memenv.h	/^#define STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	./include/leveldb/cache.h	/^#define STORAGE_LEVELDB_INCLUDE_CACHE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	./include/leveldb/comparator.h	/^#define STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	./include/leveldb/c.h	/^#define STORAGE_LEVELDB_INCLUDE_C_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	./include/leveldb/db.h	/^#define STORAGE_LEVELDB_INCLUDE_DB_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	./include/leveldb/env.h	/^#define STORAGE_LEVELDB_INCLUDE_ENV_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	./include/leveldb/filter_policy.h	/^#define STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	./include/leveldb/iterator.h	/^#define STORAGE_LEVELDB_INCLUDE_ITERATOR_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	./include/leveldb/options.h	/^#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	./include/leveldb/slice.h	/^#define STORAGE_LEVELDB_INCLUDE_SLICE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	./include/leveldb/status.h	/^#define STORAGE_LEVELDB_INCLUDE_STATUS_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	./include/leveldb/table_builder.h	/^#define STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	./include/leveldb/table.h	/^#define STORAGE_LEVELDB_INCLUDE_TABLE_H_$/;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	./include/leveldb/write_batch.h	/^#define STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_ANDROID_H_	./port/port_android.h	/^#define STORAGE_LEVELDB_PORT_PORT_ANDROID_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	./port/port_example.h	/^#define STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_H_	./port/port.h	/^#define STORAGE_LEVELDB_PORT_PORT_H_$/;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	./port/port_posix.h	/^#define STORAGE_LEVELDB_PORT_PORT_POSIX_H_$/;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	./port/win/stdint.h	/^#define STORAGE_LEVELDB_PORT_WIN_STDINT_H_$/;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	./table/block_builder.h	/^#define STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_$/;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	./table/block.h	/^#define STORAGE_LEVELDB_TABLE_BLOCK_H_$/;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	./table/filter_block.h	/^#define STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_$/;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	./table/format.h	/^#define STORAGE_LEVELDB_TABLE_FORMAT_H_$/;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	./table/iterator_wrapper.h	/^#define STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_$/;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	./table/merger.h	/^#define STORAGE_LEVELDB_TABLE_MERGER_H_$/;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	./table/two_level_iterator.h	/^#define STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_$/;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	./util/arena.h	/^#define STORAGE_LEVELDB_UTIL_ARENA_H_$/;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	./util/coding.h	/^#define STORAGE_LEVELDB_UTIL_CODING_H_$/;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	./util/crc32c.h	/^#define STORAGE_LEVELDB_UTIL_CRC32C_H_$/;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	./util/hash.h	/^#define STORAGE_LEVELDB_UTIL_HASH_H_$/;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	./util/histogram.h	/^#define STORAGE_LEVELDB_UTIL_HISTOGRAM_H_$/;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	./util/logging.h	/^#define STORAGE_LEVELDB_UTIL_LOGGING_H_$/;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	./util/mutexlock.h	/^#define STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_$/;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	./util/posix_logger.h	/^#define STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_$/;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	./util/random.h	/^#define STORAGE_LEVELDB_UTIL_RANDOM_H_$/;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	./util/testharness.h	/^#define STORAGE_LEVELDB_UTIL_TESTHARNESS_H_$/;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	./util/testutil.h	/^#define STORAGE_LEVELDB_UTIL_TESTUTIL_H_$/;"	d
SanitizeOptions	./db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SaveError	./db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f
SaveError	./table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
SaveKey	./db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon4::DBIter
SaveTo	./db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	./db/version_set.cc	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	./db/version_set.cc	/^struct Saver {$/;"	s	namespace:leveldb::__anon12
SaverState	./db/version_set.cc	/^enum SaverState {$/;"	g	namespace:leveldb::__anon12
ScanTable	./db/repair.cc	/^  Status ScanTable(TableInfo* t) {$/;"	f	class:leveldb::__anon9::Repairer
Schedule	./include/leveldb/env.h	/^  void Schedule(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
Schedule	./util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon29::PosixEnv
Seek	./db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon4::DBIter
Seek	./db/db_test.cc	/^    virtual void Seek(const Slice& k) {$/;"	f	class:leveldb::ModelDB::ModelIter
Seek	./db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_.Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	./db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	./db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	./table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	./table/iterator.cc	/^  virtual void Seek(const Slice& target) { }$/;"	f	class:leveldb::__anon21::EmptyIterator
Seek	./table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k);       Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	./table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon22::MergingIterator
Seek	./table/table_test.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::KeyConvertingIterator
Seek	./table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
SeekRandom	./db/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
SeekToFirst	./db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon4::DBIter
SeekToFirst	./db/db_test.cc	/^    virtual void SeekToFirst() { iter_ = map_->begin(); }$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToFirst	./db/memtable.cc	/^  virtual void SeekToFirst() { iter_.SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	./db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	./db/version_set.cc	/^  virtual void SeekToFirst() { index_ = 0; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	./table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	./table/iterator.cc	/^  virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon21::EmptyIterator
SeekToFirst	./table/iterator_wrapper.h	/^  void SeekToFirst()        { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	./table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon22::MergingIterator
SeekToFirst	./table/table_test.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToFirst	./table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
SeekToLast	./db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon4::DBIter
SeekToLast	./db/db_test.cc	/^    virtual void SeekToLast() {$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToLast	./db/memtable.cc	/^  virtual void SeekToLast() { iter_.SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	./db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	./db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	./table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	./table/iterator.cc	/^  virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon21::EmptyIterator
SeekToLast	./table/iterator_wrapper.h	/^  void SeekToLast()         { assert(iter_); iter_->SeekToLast();  Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	./table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon22::MergingIterator
SeekToLast	./table/table_test.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToLast	./table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
SeekToRestartPoint	./table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter
Sequence	./db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceNumber	./db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	./include/leveldb/env.h	/^  SequentialFile() { }$/;"	f	class:leveldb::SequentialFile
SequentialFile	./include/leveldb/env.h	/^class SequentialFile {$/;"	c	namespace:leveldb
SequentialFileImpl	./helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon16::SequentialFileImpl
SequentialFileImpl	./helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon16
Set	./db/skiplist_test.cc	/^    void Set(int k, intptr_t v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	./table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
SetBool	./util/env_test.cc	/^static void SetBool(void* ptr) {$/;"	f	namespace:leveldb
SetByte	./db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCapacity	./util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon27::LRUCache
SetCompactPointer	./db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	./db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	./db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	./db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCurrentFile	./db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetDataIterator	./table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
SetFrom	./db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetLastSequence	./db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	./db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLogNumber	./db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNext	./db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	./db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetPrevLogNumber	./db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetSequence	./db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetupOtherInputs	./db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
Shard	./util/cache.cc	/^  static uint32_t Shard(uint32_t hash) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
ShardedLRUCache	./util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity)$/;"	f	class:leveldb::__anon27::ShardedLRUCache
ShardedLRUCache	./util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon27
SharedState	./db/db_bench.cc	/^  SharedState() : cv(&mu) { }$/;"	f	struct:leveldb::__anon2::SharedState
SharedState	./db/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon2
ShortSuccessor	./db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	./db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShouldStopBefore	./db/version_set.cc	/^bool Compaction::ShouldStopBefore(const Slice& internal_key) {$/;"	f	class:leveldb::Compaction
ShrinkSize	./db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Signal	./port/port_android.cc	/^void CondVar::Signal(){$/;"	f	class:leveldb::port::CondVar
Signal	./port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	./port/port_android.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalAll	./port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
Size	./db/bulk_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	./db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	./helpers/memenv/memenv.cc	/^  uint64_t Size() const { return size_; }$/;"	f	class:leveldb::__anon16::FileState
Size	./table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Skewed	./util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
Skip	./db/log_test.cc	/^    virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::log::LogTest::StringSource
Skip	./helpers/memenv/memenv.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon16::SequentialFileImpl
Skip	./util/env_posix.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon29::PosixSequentialFile
SkipEmptyDataBlocksBackward	./table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
SkipEmptyDataBlocksForward	./table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
SkipList	./db/skiplist.h	/^SkipList<Key,Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	./db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipTest	./db/skiplist_test.cc	/^class SkipTest { };$/;"	c	namespace:leveldb
SkipToInitialBlock	./db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
SleepForMicroseconds	./include/leveldb/env.h	/^  void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	./util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon29::PosixEnv
Slice	./include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	./include/leveldb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	./include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	./include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	./include/leveldb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	./db/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
SnappyCompressionSupported	./table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	./db/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
Snappy_Compress	./port/port_android.h	/^inline bool Snappy_Compress($/;"	f	namespace:leveldb::port
Snappy_Compress	./port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	./port/port_android.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	./port/port_posix.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	./port/port_android.h	/^inline bool Snappy_Uncompress($/;"	f	namespace:leveldb::port
Snappy_Uncompress	./port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snapshot	./include/leveldb/db.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	./db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	./db/snapshot.h	/^  SnapshotList() {$/;"	f	class:leveldb::SnapshotList
SnapshotList	./db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SomeFileOverlapsRange	./db/version_set.cc	/^bool SomeFileOverlapsRange($/;"	f	namespace:leveldb
SpecialEnv	./db/bulk_test.cc	/^  explicit SpecialEnv(Env* base) : EnvWrapper(base) {$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	./db/bulk_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb
SpecialEnv	./db/db_test.cc	/^  explicit SpecialEnv(Env* base) : EnvWrapper(base) {$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	./db/db_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb
StandardDeviation	./util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Start	./db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon2::Stats
Start	./doc/bench/db_bench_sqlite3.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark
Start	./doc/bench/db_bench_tree_db.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark
StartBlock	./table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartPhase	./db/c_test.c	/^static void StartPhase(const char* name) {$/;"	f	file:
StartThread	./include/leveldb/env.h	/^  void StartThread(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
StartThread	./util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon29::PosixEnv
StartThreadState	./util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon29::__anon30
StartThreadWrapper	./util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon29
State	./db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	./db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest
State	./util/env_test.cc	/^struct State {$/;"	s	namespace:leveldb
Stats	./db/db_bench.cc	/^  Stats() { Start(); }$/;"	f	class:leveldb::__anon2::Stats
Stats	./db/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon2
Status	./include/leveldb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	./include/leveldb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	./include/leveldb/status.h	/^inline Status::Status(const Status& s) {$/;"	f	class:leveldb::Status
Status	./util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
StepErrorCheck	./doc/bench/db_bench_sqlite3.cc	/^static void StepErrorCheck(int status) {$/;"	f
Stop	./db/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon2::Stats
Stop	./doc/bench/db_bench_sqlite3.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark
Stop	./doc/bench/db_bench_tree_db.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark
StringDest	./db/log_test.cc	/^  class StringDest : public WritableFile {$/;"	c	class:leveldb::log::LogTest
StringSink	./table/table_test.cc	/^class StringSink: public WritableFile {$/;"	c	namespace:leveldb
StringSource	./db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) { }$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	./db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest
StringSource	./table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	./table/table_test.cc	/^class StringSource: public RandomAccessFile {$/;"	c	namespace:leveldb
Sync	./db/log_test.cc	/^    virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Sync	./helpers/memenv/memenv.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon16::WritableFileImpl
Sync	./table/table_test.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Sync	./util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon29::PosixMmapFile
TABLE_TEST	./table/table_test.cc	/^  TABLE_TEST,$/;"	e	enum:leveldb::TestType
TCONCAT	./util/testharness.h	/^#define TCONCAT(/;"	d
TCONCAT1	./util/testharness.h	/^#define TCONCAT1(/;"	d
TEST	./db/bulk_test.cc	/^TEST(DBTest, BulkDeletion) {$/;"	f	namespace:leveldb
TEST	./db/bulk_test.cc	/^TEST(DBTest, BulkInsertion) {$/;"	f	namespace:leveldb
TEST	./db/bulk_test.cc	/^TEST(DBTest, BulkInsertion2) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, Recovery) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, TableFile) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData) {$/;"	f	namespace:leveldb
TEST	./db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, BloomFilter) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, CustomComparator) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, FilesDeletedAfterCompaction) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, GetEncountersEmptyLevel) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, GetFromImmutableLayer) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, GetFromVersions) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, GetLevel0Ordering) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, GetOrderedByLevels) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, GetPicksCorrectFile) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, GetSnapshot) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, IterMultiWithDelete) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_a) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_b) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, ManualCompaction) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, MultiThreaded) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, NoSpace) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, OverlapInLevel0) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, RecoverDuringMemtableCompaction) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, RepeatedWritesToSameKey) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	./db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	./db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	./db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	./db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	./db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	./db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	./db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, Empty) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, MarginalTrailer2) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadEnd) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadFourthFirstBlockTrailer) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadFourthLastBlock) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadFourthMiddleBlock) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadFourthOneOff) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadFourthStart) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadPastEnd) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadSecondOneOff) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadSecondStart) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadSecondTenThousand) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadStart) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadThirdOneOff) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadThirdStart) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecord) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	./db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	./db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	./db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	./db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	./db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	./db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	./db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	./db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	./db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	./db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	./db/version_set_test.cc	/^TEST(FindFileTest, Empty) {$/;"	f	namespace:leveldb
TEST	./db/version_set_test.cc	/^TEST(FindFileTest, Multiple) {$/;"	f	namespace:leveldb
TEST	./db/version_set_test.cc	/^TEST(FindFileTest, MultipleNullBoundaries) {$/;"	f	namespace:leveldb
TEST	./db/version_set_test.cc	/^TEST(FindFileTest, OverlapSequenceChecks) {$/;"	f	namespace:leveldb
TEST	./db/version_set_test.cc	/^TEST(FindFileTest, OverlappingFiles) {$/;"	f	namespace:leveldb
TEST	./db/version_set_test.cc	/^TEST(FindFileTest, Single) {$/;"	f	namespace:leveldb
TEST	./db/write_batch_test.cc	/^TEST(WriteBatchTest, Append) {$/;"	f	namespace:leveldb
TEST	./db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	./db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	./db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	./helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Basics) {$/;"	f	namespace:leveldb
TEST	./helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, DBTest) {$/;"	f	namespace:leveldb
TEST	./helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, LargeWrite) {$/;"	f	namespace:leveldb
TEST	./helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Locks) {$/;"	f	namespace:leveldb
TEST	./helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Misc) {$/;"	f	namespace:leveldb
TEST	./helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	./table/filter_block_test.cc	/^TEST(FilterBlockTest, EmptyBuilder) {$/;"	f	namespace:leveldb
TEST	./table/filter_block_test.cc	/^TEST(FilterBlockTest, MultiChunk) {$/;"	f	namespace:leveldb
TEST	./table/filter_block_test.cc	/^TEST(FilterBlockTest, SingleChunk) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	./table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	./util/arena_test.cc	/^TEST(ArenaTest, Empty) {$/;"	f	namespace:leveldb
TEST	./util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	./util/bloom_test.cc	/^TEST(BloomTest, EmptyFilter) {$/;"	f	namespace:leveldb
TEST	./util/bloom_test.cc	/^TEST(BloomTest, Small) {$/;"	f	namespace:leveldb
TEST	./util/bloom_test.cc	/^TEST(BloomTest, VaryingLengths) {$/;"	f	namespace:leveldb
TEST	./util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	./util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	./util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	./util/cache_test.cc	/^TEST(CacheTest, HeavyEntries) {$/;"	f	namespace:leveldb
TEST	./util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	./util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	./util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	./util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	./util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	./util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	./util/crc32c_test.cc	/^TEST(CRC, Values) {$/;"	f	namespace:leveldb::crc32c
TEST	./util/env_test.cc	/^TEST(EnvPosixTest, RunImmediately) {$/;"	f	namespace:leveldb
TEST	./util/env_test.cc	/^TEST(EnvPosixTest, RunMany) {$/;"	f	namespace:leveldb
TEST	./util/env_test.cc	/^TEST(EnvPosixTest, StartThread) {$/;"	f	namespace:leveldb
TEST	./util/testharness.h	/^#define TEST(/;"	d
TESTHARNESS	./Makefile	/^TESTHARNESS = .\/util\/testharness.o $(TESTUTIL)$/;"	m
TESTS	./Makefile	/^TESTS = \\$/;"	m
TESTUTIL	./Makefile	/^TESTUTIL = .\/util\/testutil.o$/;"	m
TEST_CompactMemTable	./db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	./db/db_impl.cc	/^void DBImpl::TEST_CompactRange(int level, const Slice* begin,const Slice* end) {$/;"	f	class:leveldb::DBImpl
TEST_MaxNextLevelOverlappingBytes	./db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	./db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
Table	./db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	./include/leveldb/table.h	/^  explicit Table(Rep* rep) { rep_ = rep; }$/;"	f	class:leveldb::Table
Table	./include/leveldb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	./db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb
TableBuilder	./include/leveldb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	./table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	./db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	./db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableConstructor	./table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	./table/table_test.cc	/^class TableConstructor: public Constructor {$/;"	c	namespace:leveldb
TableFileName	./db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	./db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon9::Repairer
TableTest	./table/table_test.cc	/^class TableTest { };$/;"	c	namespace:leveldb
Tag	./db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb
TempFileName	./db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	./table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	./util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon32
TestArgs	./table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb
TestBackwardScan	./table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestEncodeDecode	./db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestForwardScan	./table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestHashFilter	./table/filter_block_test.cc	/^class TestHashFilter : public FilterPolicy {$/;"	c	namespace:leveldb
TestKey	./db/dbformat_test.cc	/^static void TestKey(const std::string& key,$/;"	f	namespace:leveldb
TestRandomAccess	./table/table_test.cc	/^  void TestRandomAccess(Random* rnd,$/;"	f	class:leveldb::Harness
TestState	./db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	./db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb
TestType	./table/table_test.cc	/^enum TestType {$/;"	g	namespace:leveldb
Tester	./util/testharness.h	/^  Tester(const char* f, int l)$/;"	f	class:leveldb::test::Tester
Tester	./util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
ThreadArg	./db/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark
ThreadBody	./db/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark
ThreadBody	./util/env_test.cc	/^static void ThreadBody(void* arg) {$/;"	f	namespace:leveldb
ThreadIdentifier	./port/port_android.h	/^inline uint64_t ThreadIdentifier() {$/;"	f	namespace:leveldb::port
ThreadState	./db/db_bench.cc	/^  ThreadState(int index)$/;"	f	struct:leveldb::__anon2::ThreadState
ThreadState	./db/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon2
TmpDir	./util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToString	./include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	./table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	./table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	./table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	./util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	./util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
TotalFileSize	./db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TotalTableFiles	./db/bulk_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TotalTableFiles	./db/db_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TrimSpace	./db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon2
TrimSpace	./doc/bench/db_bench_sqlite3.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon14
TrimSpace	./doc/bench/db_bench_tree_db.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon15
TruncateToPageBoundary	./util/env_posix.cc	/^  size_t TruncateToPageBoundary(size_t s) {$/;"	f	class:leveldb::__anon29::PosixMmapFile
TryReopen	./db/bulk_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TryReopen	./db/corruption_test.cc	/^  Status TryReopen(Options* options = NULL) {$/;"	f	class:leveldb::CorruptionTest
TryReopen	./db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TwoLevelIterator	./table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon25::TwoLevelIterator
TwoLevelIterator	./table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon25
Uniform	./util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
Unlock	./port/port_android.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Unlock	./port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
UnlockFile	./helpers/memenv/memenv.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
UnlockFile	./include/leveldb/env.h	/^  Status UnlockFile(FileLock* l) { return target_->UnlockFile(l); }$/;"	f	class:leveldb::EnvWrapper
UnlockFile	./util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon29::PosixEnv
UnmapCurrentRegion	./util/env_posix.cc	/^  bool UnmapCurrentRegion() {$/;"	f	class:leveldb::__anon29::PosixMmapFile
Unmask	./util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	./db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	./db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	./helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon16::FileState
Unref	./util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon27::LRUCache
UnrefEntry	./db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
Update	./table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateStats	./db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
Valid	./db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon4::DBIter
Valid	./db/db_test.cc	/^    virtual bool Valid() const { return iter_ != map_->end(); }$/;"	f	class:leveldb::ModelDB::ModelIter
Valid	./db/memtable.cc	/^  virtual bool Valid() const { return iter_.Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	./db/skiplist.h	/^inline bool SkipList<Key,Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	./db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	./table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	./table/iterator.cc	/^  virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon21::EmptyIterator
Valid	./table/iterator_wrapper.h	/^  bool Valid() const        { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	./table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon22::MergingIterator
Valid	./table/table_test.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::KeyConvertingIterator
Valid	./table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
Value	./db/corruption_test.cc	/^  Slice Value(int k, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Value	./util/cache.cc	/^  virtual void* Value(Handle* handle) {$/;"	f	class:leveldb::__anon27::ShardedLRUCache
Value	./util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueType	./db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
VarintLength	./util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
Version	./db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	./db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionEdit	./db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	./db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditTest	./db/version_edit_test.cc	/^class VersionEditTest { };$/;"	c	namespace:leveldb
VersionSet	./db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	./db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
Wait	./db/skiplist_test.cc	/^  void Wait(ReaderState s) {$/;"	f	class:leveldb::TestState
Wait	./port/port_android.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
Wait	./port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WalCheckpoint	./doc/bench/db_bench_sqlite3.cc	/^static void WalCheckpoint(sqlite3* db_) {$/;"	f
WritableFile	./include/leveldb/env.h	/^  WritableFile() { }$/;"	f	class:leveldb::WritableFile
WritableFile	./include/leveldb/env.h	/^class WritableFile {$/;"	c	namespace:leveldb
WritableFileImpl	./helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon16::WritableFileImpl
WritableFileImpl	./helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon16
Write	./db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* my_batch) {$/;"	f	class:leveldb::DBImpl
Write	./db/db_test.cc	/^  virtual Status Write(const WriteOptions& options, WriteBatch* batch) {$/;"	f	class:leveldb::ModelDB
Write	./db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
Write	./doc/bench/db_bench_sqlite3.cc	/^  void Write(bool write_sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark
Write	./doc/bench/db_bench_tree_db.cc	/^  void Write(bool sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark
WriteBatch	./db/write_batch.cc	/^WriteBatch::WriteBatch() {$/;"	f	class:leveldb::WriteBatch
WriteBatch	./include/leveldb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	./db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchTest	./db/write_batch_test.cc	/^class WriteBatchTest { };$/;"	c	namespace:leveldb
WriteBlock	./table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteDescriptor	./db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon9::Repairer
WriteInitialOffsetLog	./db/log_test.cc	/^  void WriteInitialOffsetLog() {$/;"	f	class:leveldb::log::LogTest
WriteLevel0Table	./db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteOptions	./include/leveldb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	./include/leveldb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteRandom	./db/db_bench.cc	/^  void WriteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
WriteRawBlock	./table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteSeq	./db/db_bench.cc	/^  void WriteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark
WriteSnapshot	./db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	./db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	./util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	./util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	./db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark
Writer	./db/db_impl.cc	/^  explicit Writer(port::Mutex* mu) : cv(mu) { }$/;"	f	struct:leveldb::DBImpl::Writer
Writer	./db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl
Writer	./db/log_writer.cc	/^Writer::Writer(WritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	./db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	./db/log_test.cc	/^  size_t WrittenBytes() const {$/;"	f	class:leveldb::log::LogTest
added_files	./db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState
alloc_bytes_remaining_	./util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	./util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
allowed_seeks	./db/version_edit.h	/^  int allowed_seeks;          \/\/ Seeks allowed until compaction$/;"	m	struct:leveldb::FileMetaData
arena_	./db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	./db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	./db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest
arg	./util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon29::PosixEnv::BGItem
arg	./util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon29::__anon30::StartThreadState
arg1	./include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2	./include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
arg_	./table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon25::TwoLevelIterator
backing_store_	./db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
base	./util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon32::Test
base_	./db/version_set.cc	/^  Version* base_;$/;"	m	class:leveldb::VersionSet::Builder
base_	./util/env_posix.cc	/^  char* base_;            \/\/ The mapped region$/;"	m	class:leveldb::__anon29::PosixMmapFile
base_lg_	./table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
batch	./db/db_impl.cc	/^  WriteBatch* batch;$/;"	m	struct:leveldb::DBImpl::Writer
begin	./db/db_impl.h	/^    const InternalKey* begin;   \/\/ NULL means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
bg_compaction_scheduled_	./db/db_impl.h	/^  bool bg_compaction_scheduled_;$/;"	m	class:leveldb::DBImpl
bg_cv_	./db/db_impl.h	/^  port::CondVar bg_cv_;          \/\/ Signalled when background work finishes$/;"	m	class:leveldb::DBImpl
bg_error_	./db/db_impl.h	/^  Status bg_error_;$/;"	m	class:leveldb::DBImpl
bgsignal_	./util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon29::PosixEnv
bgthread_	./util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon29::PosixEnv
bits_per_key_	./util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon26::BloomFilterPolicy
block_	./table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor
block_cache	./include/leveldb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	./table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon25::TwoLevelIterator
block_offset_	./db/log_writer.h	/^  int block_offset_;       \/\/ Current offset in block$/;"	m	class:leveldb::log::Writer
block_restart_interval	./include/leveldb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	./include/leveldb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
blocks_	./helpers/memenv/memenv.cc	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::__anon16::FileState
blocks_	./util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
blocks_memory_	./util/arena.h	/^  size_t blocks_memory_;$/;"	m	class:leveldb::Arena
bm	./db/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg
buckets_	./util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buffer	./db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	./db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	./table/block_builder.h	/^  std::string           buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
builder	./db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState
builder	./db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::DeletionState
bytes_	./db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon2::Stats
bytes_	./doc/bench/db_bench_sqlite3.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark
bytes_	./doc/bench/db_bench_tree_db.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark
bytes_read	./db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	./db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	./util/comparator.cc	/^static const Comparator* bytewise = new BytewiseComparatorImpl;$/;"	m	namespace:leveldb
cachable	./table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache_	./db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark
cache_	./db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	./util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest
cache_id	./table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep
capacity_	./util/cache.cc	/^  size_t capacity_;$/;"	m	class:leveldb::__anon27::LRUCache
charge	./util/cache.cc	/^  size_t charge;      \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon27::LRUHandle
checksum_	./db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children_	./table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon22::MergingIterator
cleanup_	./include/leveldb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
clear	./include/leveldb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
closed	./table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep
cmp	./table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon24::STLLessThan
code	./include/leveldb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
comp_	./doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::LZOCompressor<kyotocabinet::LZO::RAW> comp_;$/;"	m	class:leveldb::Benchmark
compact_pointer_	./db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	./db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	./db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState
compaction_level_	./db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	./db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	./db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	./include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	./db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	./db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	./table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter
comparator_	./table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon22::MergingIterator
comparator_	./table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::BlockConstructor
comparator_	./table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::DBConstructor
compare	./include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	./db/c.cc	/^  int (*compare_)($/;"	m	struct:leveldb_comparator_t
compare_	./db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
compressed_output	./table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep
compression	./include/leveldb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
config	./db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
constructor_	./table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness
contents	./table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents_	./db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource
contents_	./db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest
contents_	./table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink
contents_	./table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource
count_	./db/bulk_test.cc	/^  int count_;$/;"	m	class:leveldb::__anon1::AtomicCounter
count_	./db/db_test.cc	/^  int count_;$/;"	m	class:leveldb::__anon5::AtomicCounter
count_random_reads_	./db/bulk_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv
count_random_reads_	./db/db_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv
counter	./db/db_test.cc	/^  port::AtomicPointer counter[kNumThreads];$/;"	m	struct:leveldb::__anon6::MTState
counter_	./table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
crc32c	./util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	./util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	./util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb
create_	./db/c.cc	/^  char* (*create_)($/;"	m	struct:leveldb_filterpolicy_t
create_if_missing	./include/leveldb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
current	./db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
current_	./db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest
current_	./db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	./table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter
current_	./table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon22::MergingIterator
current_	./util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest
current_	./util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest
current_output	./db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
current_output	./db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::DeletionState
cv	./db/db_bench.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::__anon2::SharedState
cv	./db/db_impl.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::DBImpl::Writer
cv_	./port/port_android.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
cv_	./port/port_posix.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
data	./include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	./table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data	./table/table_test.cc	/^  virtual const KVMap& data() { return data_; }$/;"	f	class:leveldb::Constructor
data_	./db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon2::RandomGenerator
data_	./doc/bench/db_bench_sqlite3.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon14::RandomGenerator
data_	./doc/bench/db_bench_tree_db.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon15::RandomGenerator
data_	./include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	./table/block.cc	/^  const char* const data_;      \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter
data_	./table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	./table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_	./table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor
data_	./table/table_test.cc	/^  std::string data_;$/;"	m	class:leveldb::BlockConstructor
data_block	./table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep
data_block_handle_	./table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon25::TwoLevelIterator
data_iter_	./table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon25::TwoLevelIterator
db	./table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	./table/table_test.cc	/^  virtual DB* db() const { return NULL; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db	./table/table_test.cc	/^  virtual DB* db() const { return db_; }$/;"	f	class:leveldb::DBConstructor
db_	./db/bulk_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest
db_	./db/corruption_test.cc	/^  DB* db_;$/;"	m	class:leveldb::CorruptionTest
db_	./db/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark
db_	./db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest
db_	./doc/bench/db_bench_sqlite3.cc	/^  sqlite3* db_;$/;"	m	class:leveldb::Benchmark
db_	./doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::TreeDB* db_;$/;"	m	class:leveldb::Benchmark
db_	./table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor
db_lock_	./db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
db_num_	./doc/bench/db_bench_sqlite3.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark
db_num_	./doc/bench/db_bench_tree_db.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark
dbfull	./db/bulk_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbfull	./db/db_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbname	./db/c_test.c	/^static char dbname[200];$/;"	v	file:
dbname_	./db/bulk_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest
dbname_	./db/corruption_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::CorruptionTest
dbname_	./db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	./db/db_iter.cc	/^  const std::string* const dbname_;$/;"	m	class:leveldb::__anon4::DBIter::std
dbname_	./db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest
dbname_	./db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon9::Repairer::std
dbname_	./db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	./db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
default_env	./util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb
delay_sstable_sync_	./db/bulk_test.cc	/^  port::AtomicPointer delay_sstable_sync_;$/;"	m	class:leveldb::SpecialEnv
delay_sstable_sync_	./db/db_test.cc	/^  port::AtomicPointer delay_sstable_sync_;$/;"	m	class:leveldb::SpecialEnv
deleted_files	./db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState
deleted_files_	./db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	./util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest
deleted_values_	./util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest
deleter	./util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon27::LRUHandle
descriptor_file_	./db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	./db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
dest_	./db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest
dest_	./db/log_writer.h	/^  WritableFile* dest_;$/;"	m	class:leveldb::log::Writer
destructor_	./db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t
destructor_	./db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t
direction_	./db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon4::DBIter
direction_	./table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon22::MergingIterator
disjoint_sorted_files_	./db/version_set_test.cc	/^  bool disjoint_sorted_files_;$/;"	m	class:leveldb::FindFileTest
dname_	./db/db_impl.cc	/^  std::string dname_;$/;"	m	struct:leveldb::DBImpl::DeletionState
done	./db/db_impl.cc	/^  bool done;$/;"	m	struct:leveldb::DBImpl::Writer
done	./db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done_	./db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon2::Stats
done_	./doc/bench/db_bench_sqlite3.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark
done_	./doc/bench/db_bench_tree_db.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark
dropped_bytes_	./db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector
dst_	./util/env_posix.cc	/^  char* dst_;             \/\/ Where to write next  (in range [base_,limit_])$/;"	m	class:leveldb::__anon29::PosixMmapFile
dummy_versions_	./db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
edit	./db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
edit_	./db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon9::Repairer
edit_	./db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
elems_	./util/cache.cc	/^  uint32_t elems_;$/;"	m	class:leveldb::__anon27::HandleTable
empty	./db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	./include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	./table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
end	./db/db_impl.h	/^    const InternalKey* end;     \/\/ NULL means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end_	./db/dbformat.h	/^  const char* end_;$/;"	m	class:leveldb::LookupKey
end_of_buffer_offset_	./db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
entries_per_batch_	./db/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark
env	./include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env_	./db/bulk_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest
env_	./db/corruption_test.cc	/^  test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest
env_	./db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	./db/db_iter.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon4::DBIter
env_	./db/db_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest
env_	./db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon9::Repairer
env_	./db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	./db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	./helpers/memenv/memenv_test.cc	/^  Env* env_;$/;"	m	class:leveldb::MemEnvTest
env_	./util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest
eof_	./db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
error_if_exists	./include/leveldb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
events_	./util/env_test.cc	/^  std::string events_;$/;"	m	class:leveldb::EnvPosixTest
fake_filter_result	./db/c_test.c	/^static unsigned char fake_filter_result = 1;$/;"	v	file:
fd_	./util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon29::PosixFileLock
fd_	./util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon29::PosixMmapFile
fd_	./util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon29::PosixRandomAccessFile
fdatasync	./port/port_android.cc	/^int fdatasync(int fd) {$/;"	f
fdatasync	./port/port_posix.h	/^#define fdatasync /;"	d
fflush_unlocked	./port/port_android.cc	/^int fflush_unlocked(FILE *f) {$/;"	f
fflush_unlocked	./port/port_posix.h	/^#define fflush_unlocked /;"	d
file	./db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile
file	./table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep
file	./table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep
file_	./db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	./helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon16::RandomAccessFileImpl
file_	./helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon16::SequentialFileImpl
file_	./helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon16::WritableFileImpl
file_	./util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon29::PosixSequentialFile
file_	./util/posix_logger.h	/^  FILE* file_;$/;"	m	class:leveldb::PosixLogger
file_map_	./helpers/memenv/memenv.cc	/^  FileSystem file_map_;  \/\/ Protected by mutex_.$/;"	m	class:leveldb::__anon16::InMemoryEnv
file_offset_	./util/env_posix.cc	/^  uint64_t file_offset_;  \/\/ Offset of base_ in file$/;"	m	class:leveldb::__anon29::PosixMmapFile
file_size	./db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output
file_size	./db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::DeletionState::Output
file_size	./db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	./db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	./db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filename_	./util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon29::PosixMmapFile
filename_	./util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon29::PosixMmapReadableFile
filename_	./util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon29::PosixRandomAccessFile
filename_	./util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon29::PosixSequentialFile
files_	./db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
files_	./db/version_set_test.cc	/^  std::vector<FileMetaData*> files_;$/;"	m	class:leveldb::FindFileTest
fill_cache	./include/leveldb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
filter	./table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep
filter_	./util/bloom_test.cc	/^  std::string filter_;$/;"	m	class:leveldb::BloomTest
filter_block	./table/table_builder.cc	/^  FilterBlockBuilder* filter_block;$/;"	m	struct:leveldb::TableBuilder::Rep
filter_data	./table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep
filter_offsets_	./table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_policy	./include/leveldb/options.h	/^  const FilterPolicy* filter_policy;$/;"	m	struct:leveldb::Options
filter_policy_	./db/bulk_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest
filter_policy_	./db/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark
filter_policy_	./db/db_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest
finish_	./db/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon2::Stats
finished_	./table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
flist_	./db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std
fname_	./util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
force_error_	./db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource
fread_unlocked	./port/port_android.cc	/^size_t fread_unlocked(void *a, size_t b, size_t c, FILE *d) {$/;"	f
fread_unlocked	./port/port_posix.h	/^#define fread_unlocked /;"	d
func	./util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon32::Test
function	./include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	./util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon29::PosixEnv::BGItem
fwrite_unlocked	./port/port_android.cc	/^size_t fwrite_unlocked(const void *a, size_t b, size_t c, FILE *d) {$/;"	f
fwrite_unlocked	./port/port_posix.h	/^#define fwrite_unlocked /;"	d
gen	./db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest
gen_	./doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark
gen_	./doc/bench/db_bench_tree_db.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark
generation	./db/skiplist_test.cc	/^    port::AtomicPointer generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State
gettid	./util/env_posix.cc	/^  static uint64_t gettid() {$/;"	f	class:leveldb::__anon29::PosixEnv
gettid_	./util/posix_logger.h	/^  uint64_t (*gettid_)();  \/\/ Return the thread id for the current thread$/;"	m	class:leveldb::PosixLogger
grandparent_index_	./db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	./db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
has_comparator_	./db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_imm_	./db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_last_sequence_	./db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	./db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	./db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	./db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
hash	./db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest
hash	./util/cache.cc	/^  uint32_t hash;      \/\/ Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon27::LRUHandle
head_	./db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
heap_allocated	./table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	./db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark
hist_	./db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon2::Stats
hist_	./doc/bench/db_bench_sqlite3.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark
hist_	./doc/bench/db_bench_tree_db.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark
icmp_	./db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon9::Repairer
icmp_	./db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator
icmp_	./db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
id	./db/db_test.cc	/^  int id;$/;"	m	struct:leveldb::__anon6::MTThread
id_mutex_	./util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon27::ShardedLRUCache
imm	./db/db_impl.cc	/^  MemTable* imm;$/;"	m	struct:leveldb::__anon3::IterState
imm_	./db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
index_	./db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator
index_block	./table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep
index_block	./table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep
index_block_options	./table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep
index_handle	./table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	./table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	./table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon25::TwoLevelIterator
info_log	./include/leveldb/options.h	/^  Logger* info_log;$/;"	m	struct:leveldb::Options
initial_offset_	./db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
initial_offset_last_record_offsets_	./db/log_test.cc	/^  static uint64_t initial_offset_last_record_offsets_[];$/;"	m	class:leveldb::log::LogTest
initial_offset_last_record_offsets_	./db/log_test.cc	/^uint64_t LogTest::initial_offset_last_record_offsets_[] =$/;"	m	class:leveldb::log::LogTest
initial_offset_record_sizes_	./db/log_test.cc	/^  static size_t initial_offset_record_sizes_[];$/;"	m	class:leveldb::log::LogTest
initial_offset_record_sizes_	./db/log_test.cc	/^size_t LogTest::initial_offset_record_sizes_[] =$/;"	m	class:leveldb::log::LogTest
input	./db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input_version_	./db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs_	./db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];      \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
int16_t	./port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t
int32_t	./port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t
int64_t	./port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t
int8_t	./port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t
internal_comparator	./db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey
internal_comparator_	./db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	./table/table_test.cc	/^  InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor
internal_filter_policy_	./db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	./db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
ipolicy_	./db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon9::Repairer
is_default	./db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t
iter	./table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter_	./db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon4::DBIter
iter_	./db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter
iter_	./db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator
iter_	./table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	./table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator
kBadRecord	./db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon8
kBlockSize	./db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	./helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon16::FileState::__anon17
kBlockSize	./util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb
kBlockTrailerSize	./table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	./util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram
kBucketLimit	./util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCacheSize	./util/cache_test.cc	/^  static const int kCacheSize = 1000;$/;"	m	class:leveldb::CacheTest
kCompactPointer	./db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag
kComparator	./db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag
kCorrupt	./db/version_set.cc	/^  kCorrupt,$/;"	e	enum:leveldb::__anon12::SaverState
kCorruption	./include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCurrentFile	./db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	./db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDefault	./db/bulk_test.cc	/^    kDefault,$/;"	e	enum:leveldb::DBTest::OptionConfig
kDefault	./db/db_test.cc	/^    kDefault,$/;"	e	enum:leveldb::DBTest::OptionConfig
kDelayMicros	./util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb
kDeleted	./db/version_set.cc	/^  kDeleted,$/;"	e	enum:leveldb::__anon12::SaverState
kDeletedFile	./db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag
kDescriptorFile	./db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	./table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon20
kEnd	./db/bulk_test.cc	/^    kEnd$/;"	e	enum:leveldb::DBTest::OptionConfig
kEnd	./db/db_test.cc	/^    kEnd$/;"	e	enum:leveldb::DBTest::OptionConfig
kEof	./db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon8
kExpandedCompactionByteSizeLimit	./db/version_set.cc	/^static const int64_t kExpandedCompactionByteSizeLimit = 25 * kTargetFileSize;$/;"	m	namespace:leveldb
kFilter	./db/bulk_test.cc	/^    kFilter,$/;"	e	enum:leveldb::DBTest::OptionConfig
kFilter	./db/db_test.cc	/^    kFilter,$/;"	e	enum:leveldb::DBTest::OptionConfig
kFilterBase	./table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb
kFilterBaseLg	./table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb
kFirstType	./db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	./db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon4::DBIter::Direction
kForward	./table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon22::MergingIterator::Direction
kFound	./db/version_set.cc	/^  kFound,$/;"	e	enum:leveldb::__anon12::SaverState
kFullType	./db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeader	./db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb
kHeaderSize	./db/log_format.h	/^static const int kHeaderSize = 4 + 1 + 2;$/;"	m	namespace:leveldb::log
kIOError	./include/leveldb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	./db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	./include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	./db/dbformat.h	/^static const int kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	./db/dbformat.h	/^static const int kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	./db/dbformat.h	/^static const int kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	./db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag
kLastType	./db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	./port/port_android.h	/^static const bool kLittleEndian = __BYTE_ORDER == __LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLittleEndian	./port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	./port/port_posix.h	/^static const bool kLittleEndian = IS_LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLogFile	./db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	./db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag
kMajorVersion	./include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	./util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	./table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon19
kMaxGrandParentOverlapBytes	./db/version_set.cc	/^static const int64_t kMaxGrandParentOverlapBytes = 10 * kTargetFileSize;$/;"	m	namespace:leveldb
kMaxHeight	./db/skiplist.h	/^  enum { kMaxHeight = 12 };$/;"	e	enum:leveldb::SkipList::__anon10
kMaxMemCompactLevel	./db/dbformat.h	/^static const int kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxRecordType	./db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	./db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	./db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	./include/leveldb/db.h	/^static const int kMinorVersion = 4;$/;"	m	namespace:leveldb
kNewFile	./db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag
kNextFileNumber	./db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag
kNoCompression	./include/leveldb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	./db/version_set.cc	/^  kNotFound,$/;"	e	enum:leveldb::__anon12::SaverState
kNotFound	./include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	./include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	./util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon31
kNumKeys	./db/db_test.cc	/^static const int kNumKeys = 1000;$/;"	m	namespace:leveldb::__anon6
kNumLevels	./db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumShardBits	./util/cache.cc	/^static const int kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon27
kNumShards	./util/cache.cc	/^static const int kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon27
kNumTestArgs	./table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb
kNumThreads	./db/db_test.cc	/^static const int kNumThreads = 4;$/;"	m	namespace:leveldb::__anon6
kOk	./include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	./db/version_edit.cc	/^  kPrevLogNumber        = 9$/;"	e	enum:leveldb::Tag
kReverse	./db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon4::DBIter::Direction
kReverse	./table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon22::MergingIterator::Direction
kSnappyCompression	./include/leveldb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kTableFile	./db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	./table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTargetFileSize	./db/version_set.cc	/^static const int kTargetFileSize = 2 * 1048576;$/;"	m	namespace:leveldb
kTempFile	./db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	./table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb
kTestSeconds	./db/db_test.cc	/^static const int kTestSeconds = 10;$/;"	m	namespace:leveldb::__anon6
kTypeDeletion	./db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeValue	./db/dbformat.h	/^  kTypeValue = 0x1$/;"	e	enum:leveldb::ValueType
kValueSize	./db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb
kValueTypeForSeek	./db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kVerbose	./util/bloom_test.cc	/^static const int kVerbose = 1;$/;"	m	namespace:leveldb
kZeroType	./db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	./util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon26::BloomFilterPolicy
key	./db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon4::DBIter
key	./db/db_test.cc	/^    virtual Slice key() const { return iter_->first; }$/;"	f	class:leveldb::ModelDB::ModelIter
key	./db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_.key()); }$/;"	f	class:leveldb::MemTableIterator
key	./db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	./db/skiplist.h	/^inline const Key& SkipList<Key,Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	./db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest
key	./db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	./table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	./table/iterator.cc	/^  Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon21::EmptyIterator
key	./table/iterator_wrapper.h	/^  Slice key() const         { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	./table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon22::MergingIterator
key	./table/table_test.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::KeyConvertingIterator
key	./table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
key	./util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon27::LRUHandle
key_	./table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter
key_	./table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	./util/cache.cc	/^  char key_data[1];   \/\/ Beginning of key$/;"	m	struct:leveldb::__anon27::LRUHandle
key_length	./util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon27::LRUHandle
key_match_	./db/c.cc	/^  unsigned char (*key_match_)($/;"	m	struct:leveldb_filterpolicy_t
keys_	./table/filter_block.h	/^  std::string keys_;              \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
keys_	./util/bloom_test.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::BloomTest
kstart_	./db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
largest	./db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output
largest	./db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::DeletionState::Output
largest	./db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
last_id_	./util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon27::LRUCache
last_id_	./util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon27::ShardedLRUCache
last_key	./table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep
last_key_	./table/block_builder.h	/^  std::string           last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	./db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon2::Stats
last_op_finish_	./doc/bench/db_bench_sqlite3.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark
last_op_finish_	./doc/bench/db_bench_tree_db.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark
last_options_	./db/bulk_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest
last_options_	./db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest
last_record_offset_	./db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_sequence_	./db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	./db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
last_sync_	./util/env_posix.cc	/^  char* last_sync_;       \/\/ Where have we synced up to$/;"	m	class:leveldb::__anon29::PosixMmapFile
length_	./util/cache.cc	/^  uint32_t length_;$/;"	m	class:leveldb::__anon27::HandleTable
length_	./util/env_posix.cc	/^  size_t length_;$/;"	m	class:leveldb::__anon29::PosixMmapReadableFile
level	./db/db_impl.h	/^    int level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	./db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level_	./db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	./db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	./db/builder.cc	/^namespace leveldb {$/;"	n
leveldb	./db/builder.h	/^namespace leveldb {$/;"	n
leveldb	./db/bulk_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/corruption_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/db_bench.cc	/^namespace leveldb {$/;"	n
leveldb	./db/db_impl.cc	/^namespace leveldb {$/;"	n
leveldb	./db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	./db/db_iter.cc	/^namespace leveldb {$/;"	n
leveldb	./db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	./db/db_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/dbformat.cc	/^namespace leveldb {$/;"	n
leveldb	./db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	./db/dbformat_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/filename.cc	/^namespace leveldb {$/;"	n
leveldb	./db/filename.h	/^namespace leveldb {$/;"	n
leveldb	./db/filename_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	./db/log_reader.cc	/^namespace leveldb {$/;"	n
leveldb	./db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	./db/log_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/log_writer.cc	/^namespace leveldb {$/;"	n
leveldb	./db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	./db/memtable.cc	/^namespace leveldb {$/;"	n
leveldb	./db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	./db/repair.cc	/^namespace leveldb {$/;"	n
leveldb	./db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	./db/skiplist_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	./db/table_cache.cc	/^namespace leveldb {$/;"	n
leveldb	./db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	./db/version_edit.cc	/^namespace leveldb {$/;"	n
leveldb	./db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	./db/version_edit_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/version_set.cc	/^namespace leveldb {$/;"	n
leveldb	./db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	./db/version_set_test.cc	/^namespace leveldb {$/;"	n
leveldb	./db/write_batch.cc	/^namespace leveldb {$/;"	n
leveldb	./db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	./db/write_batch_test.cc	/^namespace leveldb {$/;"	n
leveldb	./doc/bench/db_bench_sqlite3.cc	/^namespace leveldb {$/;"	n
leveldb	./doc/bench/db_bench_tree_db.cc	/^namespace leveldb {$/;"	n
leveldb	./helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n
leveldb	./helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	./helpers/memenv/memenv_test.cc	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	./include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	./port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	./port/port_android.cc	/^namespace leveldb {$/;"	n
leveldb	./port/port_android.h	/^namespace leveldb {$/;"	n
leveldb	./port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	./port/port_posix.cc	/^namespace leveldb {$/;"	n
leveldb	./port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	./table/block.cc	/^namespace leveldb {$/;"	n
leveldb	./table/block.h	/^namespace leveldb {$/;"	n
leveldb	./table/block_builder.cc	/^namespace leveldb {$/;"	n
leveldb	./table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	./table/filter_block.cc	/^namespace leveldb {$/;"	n
leveldb	./table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	./table/filter_block_test.cc	/^namespace leveldb {$/;"	n
leveldb	./table/format.cc	/^namespace leveldb {$/;"	n
leveldb	./table/format.h	/^namespace leveldb {$/;"	n
leveldb	./table/iterator.cc	/^namespace leveldb {$/;"	n
leveldb	./table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	./table/merger.cc	/^namespace leveldb {$/;"	n
leveldb	./table/merger.h	/^namespace leveldb {$/;"	n
leveldb	./table/table.cc	/^namespace leveldb {$/;"	n
leveldb	./table/table_builder.cc	/^namespace leveldb {$/;"	n
leveldb	./table/table_test.cc	/^namespace leveldb {$/;"	n
leveldb	./table/two_level_iterator.cc	/^namespace leveldb {$/;"	n
leveldb	./table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	./util/arena.cc	/^namespace leveldb {$/;"	n
leveldb	./util/arena.h	/^namespace leveldb {$/;"	n
leveldb	./util/arena_test.cc	/^namespace leveldb {$/;"	n
leveldb	./util/bloom.cc	/^namespace leveldb {$/;"	n
leveldb	./util/bloom_test.cc	/^namespace leveldb {$/;"	n
leveldb	./util/cache.cc	/^namespace leveldb {$/;"	n
leveldb	./util/cache_test.cc	/^namespace leveldb {$/;"	n
leveldb	./util/coding.cc	/^namespace leveldb {$/;"	n
leveldb	./util/coding.h	/^namespace leveldb {$/;"	n
leveldb	./util/coding_test.cc	/^namespace leveldb {$/;"	n
leveldb	./util/comparator.cc	/^namespace leveldb {$/;"	n
leveldb	./util/crc32c.cc	/^namespace leveldb {$/;"	n
leveldb	./util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	./util/crc32c_test.cc	/^namespace leveldb {$/;"	n
leveldb	./util/env.cc	/^namespace leveldb {$/;"	n
leveldb	./util/env_posix.cc	/^namespace leveldb {$/;"	n
leveldb	./util/env_test.cc	/^namespace leveldb {$/;"	n
leveldb	./util/filter_policy.cc	/^namespace leveldb {$/;"	n
leveldb	./util/hash.cc	/^namespace leveldb {$/;"	n
leveldb	./util/hash.h	/^namespace leveldb {$/;"	n
leveldb	./util/histogram.cc	/^namespace leveldb {$/;"	n
leveldb	./util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	./util/logging.cc	/^namespace leveldb {$/;"	n
leveldb	./util/logging.h	/^namespace leveldb {$/;"	n
leveldb	./util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	./util/options.cc	/^namespace leveldb {$/;"	n
leveldb	./util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	./util/random.h	/^namespace leveldb {$/;"	n
leveldb	./util/status.cc	/^namespace leveldb {$/;"	n
leveldb	./util/testharness.cc	/^namespace leveldb {$/;"	n
leveldb	./util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	./util/testutil.cc	/^namespace leveldb {$/;"	n
leveldb	./util/testutil.h	/^namespace leveldb {$/;"	n
leveldb_approximate_sizes	./db/c.cc	/^void leveldb_approximate_sizes($/;"	f
leveldb_cache_create_lru	./db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	./db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	./db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	s
leveldb_cache_t	./include/leveldb/c.h	/^typedef struct leveldb_cache_t         leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	./db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	./db/c.cc	/^void leveldb_compact_range($/;"	f
leveldb_comparator_create	./db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	./db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) {$/;"	f
leveldb_comparator_t	./db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s
leveldb_comparator_t	./include/leveldb/c.h	/^typedef struct leveldb_comparator_t    leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	./db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	./db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	./db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot($/;"	f
leveldb_delete	./db/c.cc	/^void leveldb_delete($/;"	f
leveldb_destroy_db	./db/c.cc	/^void leveldb_destroy_db($/;"	f
leveldb_env_destroy	./db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_t	./db/c.cc	/^struct leveldb_env_t {$/;"	s
leveldb_env_t	./include/leveldb/c.h	/^typedef struct leveldb_env_t           leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_filelock_t	./db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	s
leveldb_filelock_t	./include/leveldb/c.h	/^typedef struct leveldb_filelock_t      leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	./db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	./db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	./db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	./db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s
leveldb_filterpolicy_t	./include/leveldb/c.h	/^typedef struct leveldb_filterpolicy_t  leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_get	./db/c.cc	/^char* leveldb_get($/;"	f
leveldb_iter_destroy	./db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	./db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	./db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	./db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_prev	./db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek	./db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	./db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	./db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	./db/c.cc	/^unsigned char leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	./db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	./db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	s
leveldb_iterator_t	./include/leveldb/c.h	/^typedef struct leveldb_iterator_t      leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_logger_t	./db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	s
leveldb_logger_t	./include/leveldb/c.h	/^typedef struct leveldb_logger_t        leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_no_compression	./include/leveldb/c.h	/^  leveldb_no_compression = 0,$/;"	e	enum:__anon18
leveldb_open	./db/c.cc	/^leveldb_t* leveldb_open($/;"	f
leveldb_options_create	./db/c.cc	/^leveldb_options_t* leveldb_options_create() {$/;"	f
leveldb_options_destroy	./db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) {$/;"	f
leveldb_options_set_block_restart_interval	./db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	./db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	./db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	./db/c.cc	/^void leveldb_options_set_comparator($/;"	f
leveldb_options_set_compression	./db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	./db/c.cc	/^void leveldb_options_set_create_if_missing($/;"	f
leveldb_options_set_env	./db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	./db/c.cc	/^void leveldb_options_set_error_if_exists($/;"	f
leveldb_options_set_filter_policy	./db/c.cc	/^void leveldb_options_set_filter_policy($/;"	f
leveldb_options_set_info_log	./db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_open_files	./db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	./db/c.cc	/^void leveldb_options_set_paranoid_checks($/;"	f
leveldb_options_set_write_buffer_size	./db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	./db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	s
leveldb_options_t	./include/leveldb/c.h	/^typedef struct leveldb_options_t       leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	./db/c.cc	/^char* leveldb_property_value($/;"	f
leveldb_put	./db/c.cc	/^void leveldb_put($/;"	f
leveldb_randomfile_t	./db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	s
leveldb_randomfile_t	./include/leveldb/c.h	/^typedef struct leveldb_randomfile_t    leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	./db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	./db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) {$/;"	f
leveldb_readoptions_set_fill_cache	./db/c.cc	/^void leveldb_readoptions_set_fill_cache($/;"	f
leveldb_readoptions_set_snapshot	./db/c.cc	/^void leveldb_readoptions_set_snapshot($/;"	f
leveldb_readoptions_set_verify_checksums	./db/c.cc	/^void leveldb_readoptions_set_verify_checksums($/;"	f
leveldb_readoptions_t	./db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	s
leveldb_readoptions_t	./include/leveldb/c.h	/^typedef struct leveldb_readoptions_t   leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	./db/c.cc	/^void leveldb_release_snapshot($/;"	f
leveldb_repair_db	./db/c.cc	/^void leveldb_repair_db($/;"	f
leveldb_seqfile_t	./db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	s
leveldb_seqfile_t	./include/leveldb/c.h	/^typedef struct leveldb_seqfile_t       leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	./include/leveldb/c.h	/^  leveldb_snappy_compression = 1$/;"	e	enum:__anon18
leveldb_snapshot_t	./db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	s
leveldb_snapshot_t	./include/leveldb/c.h	/^typedef struct leveldb_snapshot_t      leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	./db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	s
leveldb_t	./include/leveldb/c.h	/^typedef struct leveldb_t               leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_writablefile_t	./db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	s
leveldb_writablefile_t	./include/leveldb/c.h	/^typedef struct leveldb_writablefile_t  leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	./db/c.cc	/^void leveldb_write($/;"	f
leveldb_writebatch_clear	./db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_create	./db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	./db/c.cc	/^void leveldb_writebatch_delete($/;"	f
leveldb_writebatch_destroy	./db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_iterate	./db/c.cc	/^void leveldb_writebatch_iterate($/;"	f
leveldb_writebatch_put	./db/c.cc	/^void leveldb_writebatch_put($/;"	f
leveldb_writebatch_t	./db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	s
leveldb_writebatch_t	./include/leveldb/c.h	/^typedef struct leveldb_writebatch_t    leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	./db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	./db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) {$/;"	f
leveldb_writeoptions_set_sync	./db/c.cc	/^void leveldb_writeoptions_set_sync($/;"	f
leveldb_writeoptions_t	./db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	s
leveldb_writeoptions_t	./include/leveldb/c.h	/^typedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
levels_	./db/version_set.cc	/^  LevelState levels_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder
limit	./include/leveldb/db.h	/^  Slice limit;          \/\/ Not included in the range$/;"	m	struct:leveldb::Range
limit_	./util/env_posix.cc	/^  char* limit_;           \/\/ Limit of the mapped region$/;"	m	class:leveldb::__anon29::PosixMmapFile
line_	./util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
list_	./db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	./db/skiplist_test.cc	/^  SkipList<Key, Comparator> list_;$/;"	m	class:leveldb::ConcurrentTest
list_	./db/snapshot.h	/^  SnapshotImpl list_;$/;"	m	class:leveldb::SnapshotList
list_	./db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::SnapshotImpl
list_	./util/cache.cc	/^  LRUHandle** list_;$/;"	m	class:leveldb::__anon27::HandleTable
log	./db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	./db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb
log	./db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	./db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb
log	./db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb
log	./db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	./db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log_	./db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	./db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	./db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	./db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logfile_number_	./db/db_impl.h	/^  uint64_t logfile_number_;$/;"	m	class:leveldb::DBImpl
logs_	./db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon9::Repairer
lru_	./util/cache.cc	/^  LRUHandle lru_;$/;"	m	class:leveldb::__anon27::LRUCache
main	./db/bulk_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	./db/corruption_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/dbformat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/filename_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/skiplist_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/version_edit_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/version_set_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./db/write_batch_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./doc/bench/db_bench_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f
main	./doc/bench/db_bench_tree_db.cc	/^int main(int argc, char** argv) {$/;"	f
main	./helpers/memenv/memenv_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./table/filter_block_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./table/table_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./util/arena_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./util/bloom_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./util/cache_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./util/coding_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./util/crc32c_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	./util/env_test.cc	/^int main(int argc, char** argv) {$/;"	f
manifest_file_number_	./db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifests_	./db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon9::Repairer
manual_compaction_	./db/db_impl.h	/^  ManualCompaction* manual_compaction_;$/;"	m	class:leveldb::DBImpl
map_	./db/db_test.cc	/^    KVMap map_;$/;"	m	class:leveldb::ModelDB::ModelSnapshot
map_	./db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter
map_	./db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB
map_size_	./util/env_posix.cc	/^  size_t map_size_;       \/\/ How much extra memory to map at a time$/;"	m	class:leveldb::__anon29::PosixMmapFile
max_	./util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_height_	./db/skiplist.h	/^  port::AtomicPointer max_height_;   \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	./include/leveldb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_output_file_size_	./db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_sequence	./db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon9::Repairer::TableInfo
mem	./db/db_impl.cc	/^  MemTable* mem;$/;"	m	struct:leveldb::__anon3::IterState
mem_	./db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	./db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon13::MemTableInserter
memtable_	./table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor
memtable_key	./db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
message_	./db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon2::Stats
message_	./db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector
message_	./doc/bench/db_bench_sqlite3.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark
message_	./doc/bench/db_bench_tree_db.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark
meta	./db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon9::Repairer::TableInfo
metaindex_handle	./table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	./table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep
metaindex_handle_	./table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	./db/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg
micros	./db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
min_	./util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
mmapped_region_	./util/env_posix.cc	/^  void* mmapped_region_;$/;"	m	class:leveldb::__anon29::PosixMmapReadableFile
mu	./db/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon2::SharedState
mu	./db/db_impl.cc	/^  port::Mutex* mu;$/;"	m	struct:leveldb::__anon3::IterState
mu	./util/env_test.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::State
mu_	./db/bulk_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon1::AtomicCounter
mu_	./db/db_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon5::AtomicCounter
mu_	./db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState
mu_	./port/port_android.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	./port/port_android.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	./port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	./port/port_posix.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	./util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon29::PosixEnv
mu_	./util/env_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::EnvPosixTest
mu_	./util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
mutex_	./db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	./helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon16::InMemoryEnv
mutex_	./util/cache.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon27::LRUCache
n_	./table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon22::MergingIterator
name	./util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon32::Test
name_	./db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t
name_	./db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t
new_files_	./db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_;$/;"	m	class:leveldb::VersionEdit
newest	./db/snapshot.h	/^  SnapshotImpl* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	./include/leveldb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	./util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon27::LRUHandle
next_	./db/skiplist.h	/^  port::AtomicPointer next_[1];$/;"	m	struct:leveldb::SkipList::Node
next_	./db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	./db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	./db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon9::Repairer
next_file_number_	./db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	./db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	./util/cache.cc	/^  LRUHandle* next_hash;$/;"	m	struct:leveldb::__anon27::LRUHandle
next_report_	./db/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon2::Stats
next_report_	./doc/bench/db_bench_sqlite3.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark
next_report_	./doc/bench/db_bench_tree_db.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark
no_space_	./db/bulk_test.cc	/^  port::AtomicPointer no_space_;$/;"	m	class:leveldb::SpecialEnv
no_space_	./db/db_test.cc	/^  port::AtomicPointer no_space_;$/;"	m	class:leveldb::SpecialEnv
node_	./db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
num_	./db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark
num_	./doc/bench/db_bench_sqlite3.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark
num_	./doc/bench/db_bench_tree_db.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark
num_	./table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	./util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_done	./db/db_bench.cc	/^  int num_done;$/;"	m	struct:leveldb::__anon2::SharedState
num_entries	./table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep
num_initialized	./db/db_bench.cc	/^  int num_initialized;$/;"	m	struct:leveldb::__anon2::SharedState
num_input_files	./db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_restarts_	./table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter
num_running	./util/env_test.cc	/^  int num_running;$/;"	m	struct:leveldb::State
num_writable_file_errors_	./util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	./db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output
number	./db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::DeletionState::Output
number	./db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number_	./db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::SnapshotImpl
offset	./table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	./table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep
offset_	./table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	./table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
ok	./include/leveldb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	./include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
ok_	./util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
oldest	./db/snapshot.h	/^  SnapshotImpl* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
once	./util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb
operator !=	./include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ()	./db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	./db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	./db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator ()	./table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon24::STLLessThan
operator <<	./util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator =	./include/leveldb/status.h	/^inline void Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator ==	./include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator []	./include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
option_config_	./db/bulk_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest
option_config_	./db/db_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest
options	./table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep
options	./table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep
options_	./db/corruption_test.cc	/^  Options options_;$/;"	m	class:leveldb::CorruptionTest
options_	./db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	./db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB
options_	./db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon9::Repairer
options_	./db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	./db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	./table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	./table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness
options_	./table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon25::TwoLevelIterator
outfile	./db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState
outfile	./db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::DeletionState
outputs	./db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState
outputs	./db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::DeletionState
overlapped_bytes_	./db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
owned_	./db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter
owned_	./table/block.h	/^  bool owned_;                  \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	./db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	./db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon9::Repairer
owns_info_log_	./db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	./db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon9::Repairer
page_size_	./util/env_posix.cc	/^  size_t page_size_;$/;"	m	class:leveldb::__anon29::PosixEnv
page_size_	./util/env_posix.cc	/^  size_t page_size_;$/;"	m	class:leveldb::__anon29::PosixMmapFile
paranoid_checks	./include/leveldb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
pending_handle	./table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep
pending_index_entry	./table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep
pending_outputs_	./db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
pending_sync_	./util/env_posix.cc	/^  bool pending_sync_;$/;"	m	class:leveldb::__anon29::PosixMmapFile
phase	./db/c_test.c	/^const char* phase = "";$/;"	v
policy_	./table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	./table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
policy_	./table/filter_block_test.cc	/^  TestHashFilter policy_;$/;"	m	class:leveldb::FilterBlockTest
policy_	./util/bloom_test.cc	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::BloomTest
port	./port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	./port/port_android.cc	/^namespace port {$/;"	n	namespace:leveldb
port	./port/port_android.h	/^namespace port {$/;"	n	namespace:leveldb
port	./port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	./port/port_posix.cc	/^namespace port {$/;"	n	namespace:leveldb
port	./port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
pos_	./db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon2::RandomGenerator
pos_	./doc/bench/db_bench_sqlite3.cc	/^  int pos_;$/;"	m	class:leveldb::__anon14::RandomGenerator
pos_	./doc/bench/db_bench_tree_db.cc	/^  int pos_;$/;"	m	class:leveldb::__anon15::RandomGenerator
pos_	./helpers/memenv/memenv.cc	/^  size_t pos_;$/;"	m	class:leveldb::__anon16::SequentialFileImpl
prev	./util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon27::LRUHandle
prev_	./db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	./db/version_set.h	/^  Version* prev_;               \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	./db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	./db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
queue_	./util/env_posix.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon29::PosixEnv
quit_flag_	./db/skiplist_test.cc	/^  port::AtomicPointer quit_flag_;$/;"	m	class:leveldb::TestState
rand	./db/db_bench.cc	/^  Random rand;         \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon2::ThreadState
rand_	./doc/bench/db_bench_sqlite3.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark
rand_	./doc/bench/db_bench_tree_db.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark
random_read_counter_	./db/bulk_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv
random_read_counter_	./db/db_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv
reader_	./db/log_test.cc	/^  Reader reader_;$/;"	m	class:leveldb::log::LogTest
reading_	./db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest
reads_	./db/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark
reads_	./doc/bench/db_bench_sqlite3.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark
reads_	./doc/bench/db_bench_tree_db.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark
refs	./db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	./util/cache.cc	/^  uint32_t refs;$/;"	m	struct:leveldb::__anon27::LRUHandle
refs_	./db/memtable.h	/^  int refs_;$/;"	m	class:leveldb::MemTable
refs_	./db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_	./helpers/memenv/memenv.cc	/^  int refs_;  \/\/ Protected by refs_mutex_;$/;"	m	class:leveldb::__anon16::FileState
refs_mutex_	./helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon16::FileState
remove_prefix	./include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
rep	./db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t
rep	./db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	m	struct:leveldb_cache_t
rep	./db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	m	struct:leveldb_filelock_t
rep	./db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	m	struct:leveldb_iterator_t
rep	./db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	m	struct:leveldb_logger_t
rep	./db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	m	struct:leveldb_options_t
rep	./db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	m	struct:leveldb_randomfile_t
rep	./db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	m	struct:leveldb_readoptions_t
rep	./db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	m	struct:leveldb_seqfile_t
rep	./db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	m	struct:leveldb_snapshot_t
rep	./db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	m	struct:leveldb_t
rep	./db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	m	struct:leveldb_writablefile_t
rep	./db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	m	struct:leveldb_writebatch_t
rep	./db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	m	struct:leveldb_writeoptions_t
rep_	./db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	./include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	./include/leveldb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	./include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	./include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	./port/atomic_pointer.h	/^  void* rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	./port/port_android.h	/^  void* rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	./port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
report_	./db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest
reporter_	./db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
restart_index_	./table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter
restart_interval	./table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs
restart_offset_	./table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	./table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter
restarts_	./table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
result_	./table/filter_block.h	/^  std::string result_;            \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
returned_partial_	./db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource
reverse_compare	./table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs
reverse_key_comparator	./table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb
rnd_	./db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
saved_key_	./db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon4::DBIter
saved_value_	./db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon4::DBIter
seconds_	./db/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon2::Stats
seed_	./db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState
seed_	./util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seek_file	./db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	./db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seen_key_	./db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
sequence	./db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	./db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon4::DBIter
sequence_	./db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon13::MemTableInserter
set_index_handle	./table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_metaindex_handle	./table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_offset	./table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_size	./table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
shard_	./util/cache.cc	/^  LRUCache shard_[kNumShards];$/;"	m	class:leveldb::__anon27::ShardedLRUCache
shared	./db/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg
shared	./db/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon2::ThreadState
shutting_down_	./db/db_impl.h	/^  port::AtomicPointer shutting_down_;$/;"	m	class:leveldb::DBImpl
size	./include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	./table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	./table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size_	./helpers/memenv/memenv.cc	/^  uint64_t size_;$/;"	m	class:leveldb::__anon16::FileState
size_	./include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	./table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	./table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
smallest	./db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output
smallest	./db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::DeletionState::Output
smallest	./db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	./db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState
snapshot	./include/leveldb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	./db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
source_	./db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest
source_	./table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor
space_	./db/dbformat.h	/^  char space_[200];      \/\/ Avoid allocation for short keys$/;"	m	class:leveldb::LookupKey
ss_	./util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
start	./db/db_bench.cc	/^  bool start;$/;"	m	struct:leveldb::__anon2::SharedState
start	./include/leveldb/db.h	/^  Slice start;          \/\/ Included in the range$/;"	m	struct:leveldb::Range
start_	./db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon2::Stats
start_	./db/dbformat.h	/^  const char* start_;$/;"	m	class:leveldb::LookupKey
start_	./doc/bench/db_bench_sqlite3.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark
start_	./doc/bench/db_bench_tree_db.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark
start_	./table/filter_block.h	/^  std::vector<size_t> start_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
started_bgthread_	./util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon29::PosixEnv
starts_with	./include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	./db/db_test.cc	/^  MTState* state;$/;"	m	struct:leveldb::__anon6::MTThread
state	./db/version_set.cc	/^  SaverState state;$/;"	m	struct:leveldb::__anon12::Saver
state_	./db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t
state_	./db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t
state_	./db/skiplist_test.cc	/^  ReaderState state_;$/;"	m	class:leveldb::TestState
state_	./include/leveldb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
state_cv_	./db/skiplist_test.cc	/^  port::CondVar state_cv_;$/;"	m	class:leveldb::TestState
stats	./db/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon2::ThreadState
stats_	./db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	./db/db_impl.cc	/^  Status status;$/;"	m	struct:leveldb::DBImpl::Writer
status	./db/db_iter.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon4::DBIter
status	./db/db_test.cc	/^    virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::ModelDB::ModelIter
status	./db/memtable.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::MemTableIterator
status	./db/version_set.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	./table/block.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	./table/iterator.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::__anon21::EmptyIterator
status	./table/iterator_wrapper.h	/^  Status status() const     { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	./table/merger.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon22::MergingIterator
status	./table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep
status	./table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep
status	./table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	./table/table_test.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::KeyConvertingIterator
status	./table/two_level_iterator.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
status_	./db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon4::DBIter
status_	./table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter
status_	./table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon21::EmptyIterator
status_	./table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator
status_	./table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon25::TwoLevelIterator
stop	./db/db_test.cc	/^  port::AtomicPointer stop;$/;"	m	struct:leveldb::__anon6::MTState
sum_	./util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	./util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sync	./db/db_impl.cc	/^  bool sync;$/;"	m	struct:leveldb::DBImpl::Writer
sync	./include/leveldb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
t_	./db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState
table	./db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile
table0_	./util/crc32c.cc	/^static const uint32_t table0_[256] = {$/;"	m	namespace:leveldb::crc32c
table1_	./util/crc32c.cc	/^static const uint32_t table1_[256] = {$/;"	m	namespace:leveldb::crc32c
table2_	./util/crc32c.cc	/^static const uint32_t table2_[256] = {$/;"	m	namespace:leveldb::crc32c
table3_	./util/crc32c.cc	/^static const uint32_t table3_[256] = {$/;"	m	namespace:leveldb::crc32c
table_	./db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	./table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor
table_	./util/cache.cc	/^  HandleTable table_;$/;"	m	class:leveldb::__anon27::LRUCache
table_cache_	./db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	./db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon9::Repairer
table_cache_	./db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	./db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon9::Repairer
tables_	./db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon9::Repairer
target	./include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target_	./include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
test	./db/db_test.cc	/^  DBTest* test;$/;"	m	struct:leveldb::__anon6::MTState
test	./util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb
test	./util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	./util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb
test	./util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
tests	./util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon32
thread	./db/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg
thread_done	./db/db_test.cc	/^  port::AtomicPointer thread_done[kNumThreads];$/;"	m	struct:leveldb::__anon6::MTState
tid	./db/db_bench.cc	/^  int tid;             \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon2::ThreadState
tiny_cache_	./db/corruption_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::CorruptionTest
tmp_	./db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator
tmp_batch_	./db/db_impl.h	/^  WriteBatch* tmp_batch_;$/;"	m	class:leveldb::DBImpl
tmp_keys_	./table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	./db/db_impl.h	/^    InternalKey tmp_storage;    \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
total	./db/db_bench.cc	/^  int total;$/;"	m	struct:leveldb::__anon2::SharedState
total_bytes	./db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState
total_bytes	./db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::DeletionState
type	./db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	./table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs
type_crc_	./db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
ucmp	./db/version_set.cc	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::__anon12::Saver
uint16_t	./port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t
uint32_t	./port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t
uint64_t	./port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t
uint8_t	./port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t
usage_	./util/cache.cc	/^  size_t usage_;$/;"	m	class:leveldb::__anon27::LRUCache
user_comparator	./db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	./db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	./db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon4::DBIter
user_comparator_	./db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_function	./util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon29::__anon30::StartThreadState
user_key	./db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	./db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	./db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	./db/version_set.cc	/^  Slice user_key;$/;"	m	struct:leveldb::__anon12::Saver
user_policy_	./db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
val	./util/env_test.cc	/^  int val;$/;"	m	struct:leveldb::State
valid_	./db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon4::DBIter
valid_	./table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
value	./db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon4::DBIter
value	./db/db_test.cc	/^    virtual Slice value() const { return iter_->second; }$/;"	f	class:leveldb::ModelDB::ModelIter
value	./db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	./db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	./db/version_set.cc	/^  std::string* value;$/;"	m	struct:leveldb::__anon12::Saver
value	./table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	./table/iterator.cc	/^  Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon21::EmptyIterator
value	./table/iterator_wrapper.h	/^  Slice value() const       { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	./table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon22::MergingIterator
value	./table/table_test.cc	/^  virtual Slice value() const { return iter_->value(); }$/;"	f	class:leveldb::KeyConvertingIterator
value	./table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
value	./util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon27::LRUHandle
value_	./table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter
value_buf_	./db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator
value_size_	./db/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark
verify_checksums	./include/leveldb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
version	./db/db_impl.cc	/^  Version* version;$/;"	m	struct:leveldb::__anon3::IterState
version_number	./db/db_impl.cc	/^  uint64_t version_number;$/;"	m	struct:leveldb::DBImpl::DeletionState
versions_	./db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vset_	./db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder
vset_	./db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
writable_file_error_	./util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
write_buffer_size	./include/leveldb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
write_options_	./db/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark
writer_	./db/log_test.cc	/^  Writer writer_;$/;"	m	class:leveldb::log::LogTest
writers_	./db/db_impl.h	/^  std::deque<Writer*> writers_;$/;"	m	class:leveldb::DBImpl
~Arena	./util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~Benchmark	./db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	./doc/bench/db_bench_sqlite3.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	./doc/bench/db_bench_tree_db.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Block	./table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~BlockConstructor	./table/table_test.cc	/^  ~BlockConstructor() {$/;"	f	class:leveldb::BlockConstructor
~BloomTest	./util/bloom_test.cc	/^  ~BloomTest() {$/;"	f	class:leveldb::BloomTest
~Builder	./db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~Cache	./util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~CacheTest	./util/cache_test.cc	/^  ~CacheTest() {$/;"	f	class:leveldb::CacheTest
~Compaction	./db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	./util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~CondVar	./port/port_android.cc	/^CondVar::~CondVar() { $/;"	f	class:leveldb::port::CondVar
~CondVar	./port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~Constructor	./table/table_test.cc	/^  virtual ~Constructor() { }$/;"	f	class:leveldb::Constructor
~CorruptionTest	./db/corruption_test.cc	/^  ~CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
~DB	./db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBConstructor	./table/table_test.cc	/^  ~DBConstructor() {$/;"	f	class:leveldb::DBConstructor
~DBImpl	./db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	./db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon4::DBIter
~DBTest	./db/bulk_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~DBTest	./db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~Env	./util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	./util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FileLock	./util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~FileState	./helpers/memenv/memenv.cc	/^  ~FileState() {$/;"	f	class:leveldb::__anon16::FileState
~FilterPolicy	./util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() { }$/;"	f	class:leveldb::FilterPolicy
~FindFileTest	./db/version_set_test.cc	/^  ~FindFileTest() {$/;"	f	class:leveldb::FindFileTest
~HandleTable	./util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon27::HandleTable
~Handler	./db/write_batch.cc	/^WriteBatch::Handler::~Handler() { }$/;"	f	class:leveldb::WriteBatch::Handler
~Harness	./table/table_test.cc	/^  ~Harness() {$/;"	f	class:leveldb::Harness
~Histogram	./util/histogram.h	/^  ~Histogram() { }$/;"	f	class:leveldb::Histogram
~InMemoryEnv	./helpers/memenv/memenv.cc	/^  virtual ~InMemoryEnv() {$/;"	f	class:leveldb::__anon16::InMemoryEnv
~Iterator	./table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	./table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~KeyConvertingIterator	./table/table_test.cc	/^  virtual ~KeyConvertingIterator() { delete iter_; }$/;"	f	class:leveldb::KeyConvertingIterator
~LRUCache	./util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon27::LRUCache
~Logger	./util/env.cc	/^Logger::~Logger() {$/;"	f	class:leveldb::Logger
~LookupKey	./db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~MemEnvTest	./helpers/memenv/memenv_test.cc	/^  ~MemEnvTest() {$/;"	f	class:leveldb::MemEnvTest
~MemTable	./db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MemTableConstructor	./table/table_test.cc	/^  ~MemTableConstructor() {$/;"	f	class:leveldb::MemTableConstructor
~MergingIterator	./table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon22::MergingIterator
~ModelDB	./db/db_test.cc	/^  ~ModelDB() { }$/;"	f	class:leveldb::ModelDB
~ModelIter	./db/db_test.cc	/^    ~ModelIter() {$/;"	f	class:leveldb::ModelDB::ModelIter
~Mutex	./port/port_android.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~Mutex	./port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~MutexLock	./util/mutexlock.h	/^  ~MutexLock() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
~PosixEnv	./util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon29::PosixEnv
~PosixLogger	./util/posix_logger.h	/^  virtual ~PosixLogger() {$/;"	f	class:leveldb::PosixLogger
~PosixMmapFile	./util/env_posix.cc	/^  ~PosixMmapFile() {$/;"	f	class:leveldb::__anon29::PosixMmapFile
~PosixMmapReadableFile	./util/env_posix.cc	/^  virtual ~PosixMmapReadableFile() { munmap(mmapped_region_, length_); }$/;"	f	class:leveldb::__anon29::PosixMmapReadableFile
~PosixRandomAccessFile	./util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() { close(fd_); }$/;"	f	class:leveldb::__anon29::PosixRandomAccessFile
~PosixSequentialFile	./util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon29::PosixSequentialFile
~RandomAccessFile	./util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~RandomAccessFileImpl	./helpers/memenv/memenv.cc	/^  ~RandomAccessFileImpl() {$/;"	f	class:leveldb::__anon16::RandomAccessFileImpl
~Reader	./db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~Rep	./table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	./db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon9::Repairer
~Reporter	./db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~SequentialFile	./util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~SequentialFileImpl	./helpers/memenv/memenv.cc	/^  ~SequentialFileImpl() {$/;"	f	class:leveldb::__anon16::SequentialFileImpl
~ShardedLRUCache	./util/cache.cc	/^  virtual ~ShardedLRUCache() { }$/;"	f	class:leveldb::__anon27::ShardedLRUCache
~Snapshot	./db/db_impl.cc	/^Snapshot::~Snapshot() {$/;"	f	class:leveldb::Snapshot
~Status	./include/leveldb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~StringSink	./table/table_test.cc	/^  ~StringSink() { }$/;"	f	class:leveldb::StringSink
~StringSource	./table/table_test.cc	/^  virtual ~StringSource() { }$/;"	f	class:leveldb::StringSource
~Table	./table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	./table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	./db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TableConstructor	./table/table_test.cc	/^  ~TableConstructor() {$/;"	f	class:leveldb::TableConstructor
~Tester	./util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~TwoLevelIterator	./table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon25::TwoLevelIterator
~Version	./db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionEdit	./db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	./db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~WritableFile	./util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WritableFileImpl	./helpers/memenv/memenv.cc	/^  ~WritableFileImpl() {$/;"	f	class:leveldb::__anon16::WritableFileImpl
~WriteBatch	./db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	./db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
~leveldb_comparator_t	./db/c.cc	/^  virtual ~leveldb_comparator_t() {$/;"	f	struct:leveldb_comparator_t
~leveldb_filterpolicy_t	./db/c.cc	/^  virtual ~leveldb_filterpolicy_t() {$/;"	f	struct:leveldb_filterpolicy_t
